static void mt7620_port_init(struct fe_priv *priv, struct device_node *np)
{
	struct mt7620_gsw *gsw = (struct mt7620_gsw *)priv->soc->swpriv;
	const __be32 *_id = of_get_property(np, "reg", NULL);
	const __be32 *phy_addr;
	phy_interface_t phy_mode = PHY_INTERFACE_MODE_NA;
	int size, id;
	int shift = 12;
	u32 val, mask = 0;
	u32 val_delay = 0;
	u32 mask_delay = GSW_REG_GPCx_TXDELAY | GSW_REG_GPCx_RXDELAY;
	int min = (gsw->port4_ephy) ? (5) : (4);

	if (!_id || (be32_to_cpu(*_id) < min) || (be32_to_cpu(*_id) > 5)) {
		if (_id)
			pr_err("%s: invalid port id %d\n", np->name,
			       be32_to_cpu(*_id));
		else
			pr_err("%s: invalid port id\n", np->name);
		return;
	}

	id = be32_to_cpu(*_id);

	if (id == 4)
		shift = 14;

	priv->phy->phy_fixed[id] = of_get_property(np, "mediatek,fixed-link",
						   &size);
	if (priv->phy->phy_fixed[id] &&
	    (size != (4 * sizeof(*priv->phy->phy_fixed[id])))) {
		pr_err("%s: invalid fixed link property\n", np->name);
		priv->phy->phy_fixed[id] = NULL;
	}

	of_get_phy_mode(np, &phy_mode);
	switch (phy_mode) {
	case PHY_INTERFACE_MODE_RGMII:
		mask = 0;
		/* Do not touch rx/tx delay in this state to avoid problems with
		 * backward compability.
		 */
		mask_delay = 0;
		break;
	case PHY_INTERFACE_MODE_RGMII_ID:
		mask = 0;
		val_delay |= GSW_REG_GPCx_TXDELAY;
		val_delay &= ~GSW_REG_GPCx_RXDELAY;
		break;
	case PHY_INTERFACE_MODE_RGMII_RXID:
		mask = 0;
		val_delay &= ~GSW_REG_GPCx_TXDELAY;
		val_delay &= ~GSW_REG_GPCx_RXDELAY;
		break;
	case PHY_INTERFACE_MODE_RGMII_TXID:
		mask = 0;
		val_delay |= GSW_REG_GPCx_TXDELAY;
		val_delay |= GSW_REG_GPCx_RXDELAY;
		break;
	case PHY_INTERFACE_MODE_MII:
		mask = 1;
		break;
	case PHY_INTERFACE_MODE_RMII:
		mask = 2;
		break;
	default:
		dev_err(priv->dev, "port %d - invalid phy mode\n", id);
		return;
	}

	val = rt_sysc_r32(SYSC_REG_CFG1);
	val &= ~(3 << shift);
	val |= mask << shift;
	rt_sysc_w32(val, SYSC_REG_CFG1);

	if (id == 4) {
		val = mtk_switch_r32(gsw, GSW_REG_GPC2);
		val &= ~(mask_delay);
		val |= val_delay & mask_delay;
		mtk_switch_w32(gsw, val, GSW_REG_GPC2);
	}
	else if (id == 5) {
		val = mtk_switch_r32(gsw, GSW_REG_GPC1);
		val &= ~(mask_delay);
		val |= val_delay & mask_delay;
		mtk_switch_w32(gsw, val, GSW_REG_GPC1);
	}

	if (priv->phy->phy_fixed[id]) {
		const __be32 *link = priv->phy->phy_fixed[id];
		int tx_fc, rx_fc;
		u32 val = 0;

		priv->phy->speed[id] = be32_to_cpup(link++);
		tx_fc = be32_to_cpup(link++);
		rx_fc = be32_to_cpup(link++);
		priv->phy->duplex[id] = be32_to_cpup(link++);
		priv->link[id] = 1;

		switch (priv->phy->speed[id]) {
		case SPEED_10:
			val = 0;
			break;
		case SPEED_100:
			val = 1;
			break;
		case SPEED_1000:
			val = 2;
			break;
		default:
			dev_err(priv->dev, "port %d - invalid link speed: %d\n",
				id, priv->phy->speed[id]);
			priv->phy->phy_fixed[id] = 0;
			return;
		}
		val = PMCR_SPEED(val);
		val |= PMCR_LINK | PMCR_BACKPRES | PMCR_BACKOFF | PMCR_RX_EN |
			PMCR_TX_EN | PMCR_FORCE | PMCR_MAC_MODE | PMCR_IPG;
		if (tx_fc)
			val |= PMCR_TX_FC;
		if (rx_fc)
			val |= PMCR_RX_FC;
		if (priv->phy->duplex[id])
			val |= PMCR_DUPLEX;
		mtk_switch_w32(gsw, val, GSW_REG_PORT_PMCR(id));
		dev_info(priv->dev, "port %d - using fixed link parameters\n", id);
		return;
	}

	priv->phy->phy_node[id] = of_parse_phandle(np, "phy-handle", 0);
	if (!priv->phy->phy_node[id]) {
		dev_err(priv->dev, "port %d - missing phy handle\n", id);
		return;
	}

	phy_addr = of_get_property(priv->phy->phy_node[id], "reg", NULL);
	if (phy_addr && mdiobus_get_phy(priv->mii_bus, be32_to_cpup(phy_addr))) {
		u32 val = PMCR_BACKPRES | PMCR_BACKOFF | PMCR_RX_EN |
			PMCR_TX_EN |  PMCR_MAC_MODE | PMCR_IPG;

		mtk_switch_w32(gsw, val, GSW_REG_PORT_PMCR(id));
		fe_connect_phy_node(priv, priv->phy->phy_node[id], id);
		gsw->autopoll |= BIT(be32_to_cpup(phy_addr));
		mt7620_auto_poll(gsw,id);
	}
}
