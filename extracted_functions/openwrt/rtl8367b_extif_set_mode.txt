static int rtl8367b_extif_set_mode(struct rtl8366_smi *smi, int id,
				   enum rtl8367_extif_mode mode)
{
	int err;

	/* set port mode */
	switch (mode) {
	case RTL8367_EXTIF_MODE_RGMII:
		REG_RMW(smi, RTL8367B_CHIP_DEBUG0_REG,
			RTL8367B_DEBUG0_SEL33(id),
			RTL8367B_DEBUG0_SEL33(id));
		if (id <= 1) {
			REG_RMW(smi, RTL8367B_CHIP_DEBUG0_REG,
				RTL8367B_DEBUG0_DRI(id) |
					RTL8367B_DEBUG0_DRI_RG(id) |
					RTL8367B_DEBUG0_SLR(id),
				RTL8367B_DEBUG0_DRI_RG(id) |
					RTL8367B_DEBUG0_SLR(id));
			REG_RMW(smi, RTL8367B_CHIP_DEBUG1_REG,
				RTL8367B_DEBUG1_DN_MASK(id) |
					RTL8367B_DEBUG1_DP_MASK(id),
				(7 << RTL8367B_DEBUG1_DN_SHIFT(id)) |
					(7 << RTL8367B_DEBUG1_DP_SHIFT(id)));
		} else {
			REG_RMW(smi, RTL8367B_CHIP_DEBUG2_REG,
				RTL8367B_DEBUG2_DRI_EXT2 |
					RTL8367B_DEBUG2_DRI_EXT2_RG |
					RTL8367B_DEBUG2_SLR_EXT2 |
					RTL8367B_DEBUG2_RG2_DN_MASK |
					RTL8367B_DEBUG2_RG2_DP_MASK,
				RTL8367B_DEBUG2_DRI_EXT2_RG |
					RTL8367B_DEBUG2_SLR_EXT2 |
					(7 << RTL8367B_DEBUG2_RG2_DN_SHIFT) |
					(7 << RTL8367B_DEBUG2_RG2_DP_SHIFT));
		}
		break;

	case RTL8367_EXTIF_MODE_TMII_MAC:
	case RTL8367_EXTIF_MODE_TMII_PHY:
		REG_RMW(smi, RTL8367B_BYPASS_LINE_RATE_REG, BIT(id), BIT(id));
		break;

	case RTL8367_EXTIF_MODE_GMII:
		REG_RMW(smi, RTL8367B_CHIP_DEBUG0_REG,
			RTL8367B_DEBUG0_SEL33(id),
			RTL8367B_DEBUG0_SEL33(id));
		REG_RMW(smi, RTL8367B_EXT_RGMXF_REG(id), BIT(6), BIT(6));
		break;

	case RTL8367_EXTIF_MODE_MII_MAC:
	case RTL8367_EXTIF_MODE_MII_PHY:
	case RTL8367_EXTIF_MODE_DISABLED:
		REG_RMW(smi, RTL8367B_BYPASS_LINE_RATE_REG, BIT(id), 0);
		REG_RMW(smi, RTL8367B_EXT_RGMXF_REG(id), BIT(6), 0);
		break;

	default:
		dev_err(smi->parent,
			"invalid mode for external interface %d\n", id);
		return -EINVAL;
	}

	if (id <= 1)
		REG_RMW(smi, RTL8367B_DIS_REG,
			RTL8367B_DIS_RGMII_MASK << RTL8367B_DIS_RGMII_SHIFT(id),
			mode << RTL8367B_DIS_RGMII_SHIFT(id));
	else
		REG_RMW(smi, RTL8367B_DIS2_REG,
			RTL8367B_DIS2_RGMII_MASK << RTL8367B_DIS2_RGMII_SHIFT,
			mode << RTL8367B_DIS2_RGMII_SHIFT);

	return 0;
}
