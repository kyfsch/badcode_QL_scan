void rtl9300_do_rx_calibration_1(int sds, phy_interface_t phy_mode)
{
	/* From both rtl9300_rxCaliConf_serdes_myParam and rtl9300_rxCaliConf_phy_myParam */
	int tap0_init_val = 0x1f; /* Initial Decision Fed Equalizer 0 tap */
	int vth_min       = 0x0;

	pr_info("start_1.1.1 initial value for sds %d\n", sds);
	rtl930x_write_sds_phy(sds, 6,  0, 0);

	/* FGCAL */
	rtl9300_sds_field_w(sds, 0x2e, 0x01, 14, 14, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x1c, 10,  5, 0x20);
	rtl9300_sds_field_w(sds, 0x2f, 0x02,  0,  0, 0x01);

	/* DCVS */
	rtl9300_sds_field_w(sds, 0x2e, 0x1e, 14, 11, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x01, 15, 15, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x02, 11, 11, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x1c,  4,  0, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x1d, 15, 11, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x1d, 10,  6, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x1d,  5,  1, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x02, 10,  6, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x11,  4,  0, 0x00);
	rtl9300_sds_field_w(sds, 0x2f, 0x00,  3,  0, 0x0f);
	rtl9300_sds_field_w(sds, 0x2e, 0x04,  6,  6, 0x01);
	rtl9300_sds_field_w(sds, 0x2e, 0x04,  7,  7, 0x01);

	/* LEQ (Long Term Equivalent signal level) */
	rtl9300_sds_field_w(sds, 0x2e, 0x16, 14,  8, 0x00);

	/* DFE (Decision Fed Equalizer) */
	rtl9300_sds_field_w(sds, 0x2f, 0x03,  5,  0, tap0_init_val);
	rtl9300_sds_field_w(sds, 0x2e, 0x09, 11,  6, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x09,  5,  0, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x0a,  5,  0, 0x00);
	rtl9300_sds_field_w(sds, 0x2f, 0x01,  5,  0, 0x00);
	rtl9300_sds_field_w(sds, 0x2f, 0x12,  5,  0, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x0a, 11,  6, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x06,  5,  0, 0x00);
	rtl9300_sds_field_w(sds, 0x2f, 0x01,  5,  0, 0x00);

	/* Vth */
	rtl9300_sds_field_w(sds, 0x2e, 0x13,  5,  3, 0x07);
	rtl9300_sds_field_w(sds, 0x2e, 0x13,  2,  0, 0x07);
	rtl9300_sds_field_w(sds, 0x2f, 0x0b,  5,  3, vth_min);

	pr_info("end_1.1.1 --\n");

	pr_info("start_1.1.2 Load DFE init. value\n");

	rtl9300_sds_field_w(sds, 0x2e, 0x0f, 13,  7, 0x7f);

	pr_info("end_1.1.2\n");

	pr_info("start_1.1.3 disable LEQ training,enable DFE clock\n");

	rtl9300_sds_field_w(sds, 0x2e, 0x17,  7,  7, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x17,  6,  2, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x0c,  8,  8, 0x00);
	rtl9300_sds_field_w(sds, 0x2e, 0x0b,  4,  4, 0x01);
	rtl9300_sds_field_w(sds, 0x2e, 0x12, 14, 14, 0x00);
	rtl9300_sds_field_w(sds, 0x2f, 0x02, 15, 15, 0x00);

	pr_info("end_1.1.3 --\n");

	pr_info("start_1.1.4 offset cali setting\n");

	rtl9300_sds_field_w(sds, 0x2e, 0x0f, 15, 14, 0x03);

	pr_info("end_1.1.4\n");

	pr_info("start_1.1.5 LEQ and DFE setting\n");

	/* TODO: make this work for DAC cables of different lengths */
	/* For a 10GBit serdes wit Fibre, SDS 8 or 9 */
	if (phy_mode == PHY_INTERFACE_MODE_10GBASER || PHY_INTERFACE_MODE_1000BASEX)
		rtl9300_sds_field_w(sds, 0x2e, 0x16,  3,  2, 0x02);
	else
		pr_err("%s not PHY-based or SerDes, implement DAC!\n", __func__);

	/* No serdes, check for Aquantia PHYs */
	rtl9300_sds_field_w(sds, 0x2e, 0x16,  3,  2, 0x02);

	rtl9300_sds_field_w(sds, 0x2e, 0x0f,  6,  0, 0x5f);
	rtl9300_sds_field_w(sds, 0x2f, 0x05,  7,  2, 0x1f);
	rtl9300_sds_field_w(sds, 0x2e, 0x19,  9,  5, 0x1f);
	rtl9300_sds_field_w(sds, 0x2f, 0x0b, 15,  9, 0x3c);
	rtl9300_sds_field_w(sds, 0x2e, 0x0b,  1,  0, 0x03);

	pr_info("end_1.1.5\n");
}
