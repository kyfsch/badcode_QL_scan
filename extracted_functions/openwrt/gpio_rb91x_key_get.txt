static int gpio_rb91x_key_get(struct gpio_chip *gc, unsigned offset)
{
	struct gpio_rb91x_key *drvdata = to_gpio_rb91x_key(gc);
	struct gpio_desc *gpio = drvdata->gpio;
	int val, bak_val;

	switch (offset) {
	case GPIO_RB91X_KEY_NAND:
		mutex_lock(&drvdata->mutex);
		val = gpiod_get_value_cansleep(gpio);
		mutex_unlock(&drvdata->mutex);
		break;
	case GPIO_RB91X_KEY_PDIS:
		mutex_lock(&drvdata->mutex);
		val = drvdata->polling_disabled;
		mutex_unlock(&drvdata->mutex);
		break;
	case GPIO_RB91X_KEY_POLL:
		mutex_lock(&drvdata->poll_mutex);
		mutex_lock(&drvdata->mutex);
		bak_val = gpiod_get_raw_value_cansleep(gpio);
		gpiod_direction_input(gpio);
		/*
		 * Without this delay nothing works. Get it
		 * from mikrotik RouterOS linux kernel patches.
		 */
		udelay(200);
		val = gpiod_get_raw_value_cansleep(gpio);
		gpiod_direction_output_raw(gpio, bak_val);
		mutex_unlock(&drvdata->mutex);
		mutex_unlock(&drvdata->poll_mutex);
		break;
	default:
		return -EINVAL;
	}

	return val;
}
