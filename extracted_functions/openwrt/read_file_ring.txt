static ssize_t read_file_ring(struct file *file, char __user *user_buf,
			      size_t count, loff_t *ppos,
			      struct ag71xx *ag,
			      struct ag71xx_ring *ring,
			      unsigned desc_reg)
{
	int ring_size = BIT(ring->order);
	int ring_mask = ring_size - 1;
	char *buf;
	unsigned int buflen;
	unsigned int len = 0;
	unsigned long flags;
	ssize_t ret;
	int curr;
	int dirty;
	u32 desc_hw;
	int i;

	buflen = (ring_size * DESC_PRINT_LEN);
	buf = kmalloc(buflen, GFP_KERNEL);
	if (!buf)
		return -ENOMEM;

	len += snprintf(buf + len, buflen - len,
			"Idx ... %-8s %-8s %-8s %-8s .\n",
			"desc", "next", "data", "ctrl");

	spin_lock_irqsave(&ag->lock, flags);

	curr = (ring->curr & ring_mask);
	dirty = (ring->dirty & ring_mask);
	desc_hw = ag71xx_rr(ag, desc_reg);
	for (i = 0; i < ring_size; i++) {
		struct ag71xx_desc *desc = ag71xx_ring_desc(ring, i);
		u32 desc_dma = ((u32) ring->descs_dma) + i * AG71XX_DESC_SIZE;

		len += snprintf(buf + len, buflen - len,
			"%3d %c%c%c %08x %08x %08x %08x %c\n",
			i,
			(i == curr) ? 'C' : ' ',
			(i == dirty) ? 'D' : ' ',
			(desc_hw == desc_dma) ? 'H' : ' ',
			desc_dma,
			desc->next,
			desc->data,
			desc->ctrl,
			(desc->ctrl & DESC_EMPTY) ? 'E' : '*');
	}

	spin_unlock_irqrestore(&ag->lock, flags);

	ret = simple_read_from_buffer(user_buf, count, ppos, buf, len);
	kfree(buf);

	return ret;
}
