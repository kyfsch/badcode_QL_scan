extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	int str = 0;
	int ts, i;

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			++yy_cp;

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
/* ignore comment */
	YY_BREAK
case 2:
YY_RULE_SETUP
/* whitespaces */
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
/* escaped new line */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
return T_EOL;
	YY_BREAK
case 5:
YY_RULE_SETUP
return T_BOOL;
	YY_BREAK
case 6:
YY_RULE_SETUP
return T_CHOICE;
	YY_BREAK
case 7:
YY_RULE_SETUP
return T_COMMENT;
	YY_BREAK
case 8:
YY_RULE_SETUP
return T_CONFIG;
	YY_BREAK
case 9:
YY_RULE_SETUP
return T_DEF_BOOL;
	YY_BREAK
case 10:
YY_RULE_SETUP
return T_DEF_TRISTATE;
	YY_BREAK
case 11:
YY_RULE_SETUP
return T_DEFAULT;
	YY_BREAK
case 12:
YY_RULE_SETUP
return T_DEPENDS;
	YY_BREAK
case 13:
YY_RULE_SETUP
return T_ENDCHOICE;
	YY_BREAK
case 14:
YY_RULE_SETUP
return T_ENDIF;
	YY_BREAK
case 15:
YY_RULE_SETUP
return T_ENDMENU;
	YY_BREAK
case 16:
YY_RULE_SETUP
return T_HELP;
	YY_BREAK
case 17:
YY_RULE_SETUP
return T_HEX;
	YY_BREAK
case 18:
YY_RULE_SETUP
return T_IF;
	YY_BREAK
case 19:
YY_RULE_SETUP
return T_IMPLY;
	YY_BREAK
case 20:
YY_RULE_SETUP
return T_INT;
	YY_BREAK
case 21:
YY_RULE_SETUP
return T_MAINMENU;
	YY_BREAK
case 22:
YY_RULE_SETUP
return T_MENU;
	YY_BREAK
case 23:
YY_RULE_SETUP
return T_MENUCONFIG;
	YY_BREAK
case 24:
YY_RULE_SETUP
return T_MODULES;
	YY_BREAK
case 25:
YY_RULE_SETUP
return T_ON;
	YY_BREAK
case 26:
YY_RULE_SETUP
return T_OPTIONAL;
	YY_BREAK
case 27:
YY_RULE_SETUP
return T_PROMPT;
	YY_BREAK
case 28:
YY_RULE_SETUP
return T_RANGE;
	YY_BREAK
case 29:
YY_RULE_SETUP
return T_RESET;
	YY_BREAK
case 30:
YY_RULE_SETUP
return T_SELECT;
	YY_BREAK
case 31:
YY_RULE_SETUP
return T_SOURCE;
	YY_BREAK
case 32:
YY_RULE_SETUP
return T_STRING;
	YY_BREAK
case 33:
YY_RULE_SETUP
return T_TRISTATE;
	YY_BREAK
case 34:
YY_RULE_SETUP
return T_VISIBLE;
	YY_BREAK
case 35:
YY_RULE_SETUP
return T_OR;
	YY_BREAK
case 36:
YY_RULE_SETUP
return T_AND;
	YY_BREAK
case 37:
YY_RULE_SETUP
return T_EQUAL;
	YY_BREAK
case 38:
YY_RULE_SETUP
return T_UNEQUAL;
	YY_BREAK
case 39:
YY_RULE_SETUP
return T_LESS;
	YY_BREAK
case 40:
YY_RULE_SETUP
return T_LESS_EQUAL;
	YY_BREAK
case 41:
YY_RULE_SETUP
return T_GREATER;
	YY_BREAK
case 42:
YY_RULE_SETUP
return T_GREATER_EQUAL;
	YY_BREAK
case 43:
YY_RULE_SETUP
return T_NOT;
	YY_BREAK
case 44:
YY_RULE_SETUP
return T_OPEN_PAREN;
	YY_BREAK
case 45:
YY_RULE_SETUP
return T_CLOSE_PAREN;
	YY_BREAK
case 46:
YY_RULE_SETUP
return T_COLON_EQUAL;
	YY_BREAK
case 47:
YY_RULE_SETUP
return T_PLUS_EQUAL;
	YY_BREAK
case 48:
YY_RULE_SETUP
{
				str = yytext[0];
				new_string();
				BEGIN(STRING);
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
				alloc_string(yytext, yyleng);
				yylval.string = text;
				return T_WORD;
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
				/* this token includes at least one '$' */
				yylval.string = expand_token(yytext, yyleng);
				if (strlen(yylval.string))
					return T_WORD;
				free(yylval.string);
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
warn_ignored_character(*yytext);
	YY_BREAK

case 52:
YY_RULE_SETUP
{
		alloc_string(yytext, yyleng);
		yylval.string = text;
		return T_ASSIGN_VAL;
	}
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{ BEGIN(INITIAL); return T_EOL; }
	YY_BREAK
case 54:
YY_RULE_SETUP

	YY_BREAK

case 55:
YY_RULE_SETUP
append_expanded_string(yytext);
	YY_BREAK
case 56:
YY_RULE_SETUP
{
		append_string(yytext, yyleng);
	}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
		append_string(yytext + 1, yyleng - 1);
	}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
		if (str == yytext[0]) {
			BEGIN(INITIAL);
			yylval.string = text;
			return T_WORD_QUOTE;
		} else
			append_string(yytext, 1);
	}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{
		fprintf(stderr,
			"%s:%d:warning: multi-line strings not supported\n",
			zconf_curname(), zconf_lineno());
		unput('\n');
		BEGIN(INITIAL);
		yylval.string = text;
		return T_WORD_QUOTE;
	}
	YY_BREAK
case YY_STATE_EOF(STRING):
{
		BEGIN(INITIAL);
		yylval.string = text;
		return T_WORD_QUOTE;
	}
	YY_BREAK

case 60:
YY_RULE_SETUP
{
		ts = 0;
		for (i = 0; i < yyleng; i++) {
			if (yytext[i] == '\t')
				ts = (ts & ~7) + 8;
			else
				ts++;
		}
		last_ts = ts;
		if (first_ts) {
			if (ts < first_ts) {
				zconf_endhelp();
				return T_HELPTEXT;
			}
			ts -= first_ts;
			while (ts > 8) {
				append_string("        ", 8);
				ts -= 8;
			}
			append_string("        ", ts);
		}
	}
	YY_BREAK
case 61:
/* rule 61 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
		zconf_endhelp();
		return T_HELPTEXT;
	}
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP
{
		append_string("\n", 1);
	}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
		while (yyleng) {
			if ((yytext[yyleng-1] != ' ') && (yytext[yyleng-1] != '\t'))
				break;
			yyleng--;
		}
		append_string(yytext, yyleng);
		if (!first_ts)
			first_ts = last_ts;
	}
	YY_BREAK
case YY_STATE_EOF(HELP):
{
		zconf_endhelp();
		return T_HELPTEXT;
	}
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ASSIGN_VAL):
{
	BEGIN(INITIAL);

	if (prev_token != T_EOL && prev_token != T_HELPTEXT)
		fprintf(stderr, "%s:%d:warning: no new line at end of file\n",
			current_file->name, yylineno);

	if (current_file) {
		zconf_endfile();
		return T_EOL;
	}
	fclose(yyin);
	yyterminate();
}
	YY_BREAK
case 64:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
