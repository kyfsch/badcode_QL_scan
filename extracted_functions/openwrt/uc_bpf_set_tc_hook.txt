uc_bpf_set_tc_hook(uc_value_t *ifname, uc_value_t *type, uc_value_t *prio,
		   int fd)
{
	DECLARE_LIBBPF_OPTS(bpf_tc_hook, hook);
	DECLARE_LIBBPF_OPTS(bpf_tc_opts, attach_tc,
			    .handle = 1);
	const char *type_str;
	uint64_t prio_val;

	if (ucv_type(ifname) != UC_STRING || ucv_type(type) != UC_STRING ||
	    ucv_type(prio) != UC_INTEGER)
		err_return(EINVAL, NULL);

	prio_val = ucv_int64_get(prio);
	if (prio_val > 0xffff)
		err_return(EINVAL, NULL);

	type_str = ucv_string_get(type);
	if (!strcmp(type_str, "ingress"))
		hook.attach_point = BPF_TC_INGRESS;
	else if (!strcmp(type_str, "egress"))
		hook.attach_point = BPF_TC_EGRESS;
	else
		err_return(EINVAL, NULL);

	hook.ifindex = if_nametoindex(ucv_string_get(ifname));
	if (!hook.ifindex)
		goto error;

	bpf_tc_hook_create(&hook);
	attach_tc.priority = prio_val;
	if (bpf_tc_detach(&hook, &attach_tc) < 0 && fd < 0)
		goto error;

	if (fd < 0)
		goto out;

	attach_tc.prog_fd = fd;
	if (bpf_tc_attach(&hook, &attach_tc) < 0)
		goto error;

out:
	return TRUE;

error:
	if (fd >= 0)
		err_return(ENOENT, NULL);
	return NULL;
}
