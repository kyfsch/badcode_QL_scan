store_port_val(struct nl_msg *msg, struct nlattr *nla, struct switch_val *val)
{
	struct nlattr *p;
	int ports = val->attr->dev->ports;
	int err = 0;
	int remaining;

	if (!val->value.ports)
		val->value.ports = malloc(sizeof(struct switch_port) * ports);

	nla_for_each_nested(p, nla, remaining) {
		struct nlattr *tb[SWITCH_PORT_ATTR_MAX+1];
		struct switch_port *port;

		if (val->len >= ports)
			break;

		err = nla_parse_nested(tb, SWITCH_PORT_ATTR_MAX, p, port_policy);
		if (err < 0)
			goto out;

		if (!tb[SWITCH_PORT_ID])
			continue;

		port = &val->value.ports[val->len];
		port->id = nla_get_u32(tb[SWITCH_PORT_ID]);
		port->flags = 0;
		if (tb[SWITCH_PORT_FLAG_TAGGED])
			port->flags |= SWLIB_PORT_FLAG_TAGGED;

		val->len++;
	}

out:
	return err;
}
