static int ubnt_ledbar_probe(struct i2c_client *client,
			     const struct i2c_device_id *id)
{
	struct device_node *np = client->dev.of_node;
	struct ubnt_ledbar *ledbar;
	int ret;

	ledbar = devm_kzalloc(&client->dev, sizeof(*ledbar), GFP_KERNEL);
	if (!ledbar)
		return -ENOMEM;

	ledbar->enable_gpio = devm_gpiod_get(&client->dev, "enable", GPIOD_OUT_LOW);

	if (IS_ERR(ledbar->enable_gpio)) {
		ret = PTR_ERR(ledbar->enable_gpio);
		dev_err(&client->dev, "Failed to get enable gpio: %d\n", ret);
		return ret;
	}

	ledbar->reset_gpio = devm_gpiod_get_optional(&client->dev, "reset", GPIOD_OUT_LOW);

	if (IS_ERR(ledbar->reset_gpio)) {
		ret = PTR_ERR(ledbar->reset_gpio);
		dev_err(&client->dev, "Failed to get reset gpio: %d\n", ret);
		return ret;
	}

	ledbar->led_count = 1;
	of_property_read_u32(np, "led-count", &ledbar->led_count);

	ledbar->client = client;

	mutex_init(&ledbar->lock);

	i2c_set_clientdata(client, ledbar);

	// Reset and initialize the MCU
	ubnt_ledbar_reset(ledbar);

	ledbar->led_red.brightness_set_blocking = ubnt_ledbar_set_red_brightness;
	ubnt_ledbar_init_led(of_get_child_by_name(np, "red"), ledbar, &ledbar->led_red);

	ledbar->led_green.brightness_set_blocking = ubnt_ledbar_set_green_brightness;
	ubnt_ledbar_init_led(of_get_child_by_name(np, "green"), ledbar, &ledbar->led_green);

	ledbar->led_blue.brightness_set_blocking = ubnt_ledbar_set_blue_brightness;
	ubnt_ledbar_init_led(of_get_child_by_name(np, "blue"), ledbar, &ledbar->led_blue);

	return ubnt_ledbar_apply_state(ledbar);
}
