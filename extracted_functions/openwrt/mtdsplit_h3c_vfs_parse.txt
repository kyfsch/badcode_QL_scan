static int mtdsplit_h3c_vfs_parse(struct mtd_info *mtd,
				  const struct mtd_partition **pparts,
				  struct mtd_part_parser_data *data)
{
	struct mtd_partition *parts;
	uint32_t format_flag;
	struct file_entry file_entry;
	size_t retlen;
	int err;
	size_t kernel_size;
	size_t expected_offset;
	size_t rootfs_offset;

	if (mtd->erasesize != VFS_ERASEBLOCK_SIZE)
		return -EINVAL;

	/* Check format flag */
	err = mtd_read(mtd, FORMAT_FLAG_OFFSET, sizeof(format_flag), &retlen,
		       (void *) &format_flag);
	if (err)
		return err;

	if (retlen != sizeof(format_flag))
		return -EIO;

	if (format_flag != FORMAT_FLAG)
		return -EINVAL;

	/* Check file entry */
	err = mtd_read(mtd, FILE_ENTRY_OFFSET, sizeof(file_entry), &retlen,
		       (void *) &file_entry);
	if (err)
		return err;

	if (retlen != sizeof(file_entry))
		return -EIO;

	if (file_entry.flags != FILE_ENTRY_FLAGS)
		return -EINVAL;

	if (file_entry.parent_block != FILE_ENTRY_PARENT_BLOCK)
		return -EINVAL;

	if (file_entry.parent_index != FILE_ENTRY_PARENT_INDEX)
		return -EINVAL;

	if (file_entry.data_block != FILE_ENTRY_DATA_BLOCK)
		return -EINVAL;

	if (strncmp(file_entry.name, FILE_ENTRY_NAME, sizeof(file_entry.name)) != 0)
		return -EINVAL;

	/* Find rootfs offset */
	kernel_size = block_offset(file_entry.data_block +
				   block_count(file_entry.length) - 1) +
		      VFS_BLOCK_SIZE;

	expected_offset = mtd_roundup_to_eb(kernel_size, mtd);

	err = mtd_find_rootfs_from(mtd, expected_offset, mtd->size,
				   &rootfs_offset, NULL);
	if (err)
		return err;

	parts = kzalloc(NR_PARTS * sizeof(*parts), GFP_KERNEL);
	if (!parts)
		return -ENOMEM;

	parts[0].name = KERNEL_PART_NAME;
	parts[0].offset = 0;
	parts[0].size = rootfs_offset;

	parts[1].name = ROOTFS_PART_NAME;
	parts[1].offset = rootfs_offset;
	parts[1].size = mtd->size - rootfs_offset;

	*pparts = parts;
	return NR_PARTS;
}
