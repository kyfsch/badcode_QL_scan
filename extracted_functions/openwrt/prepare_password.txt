prepare_password(void)
{
	static char lbuf[1024];
	unsigned char dig[SHA_DIGESTSIZE];
	BigInteger x, v, n, g;
	SHA1_CTX ctxt;
	int ulen = strlen(username);
	FILE *f;

	lbuf[sizeof(lbuf) - 1] = 0;

	f = fopen(passwd_file, "r");
	if (!f)
		return false;

	while (fgets(lbuf, sizeof(lbuf) - 1, f) != NULL) {
		char *str, *s2;

		if (strncmp(lbuf, username, ulen) != 0)
			continue;

		if (lbuf[ulen] != ':')
			continue;

		str = &lbuf[ulen + 1];

		if (strncmp(str, "$1$", 3) != 0)
			continue;

		s2 = strchr(str + 3, '$');
		if (!s2)
			continue;

		if (s2 - str >= MAXSALTLEN)
			continue;

		strncpy((char *) pw_saltbuf, str, s2 - str);
		pw_saltbuf[s2 - str] = 0;

		s2 = strchr(s2, ':');
		if (!s2)
			continue;

		*s2 = 0;
		if (s2 - str >= MAXPARAMLEN)
			continue;

		strncpy((char *)password, str, MAXPARAMLEN);
		fclose(f);
		goto hash_password;
	}

	/* not found */
	fclose(f);
	return false;

hash_password:
	tce = gettcid(tpe.index);
	do {
		t_random(tpe.password.data, SALTLEN);
	} while (memcmp(saltbuf, (char *)dig, sizeof(saltbuf)) == 0);
	if (saltbuf[0] == 0)
		saltbuf[0] = 0xff;

	n = BigIntegerFromBytes(tce->modulus.data, tce->modulus.len);
	g = BigIntegerFromBytes(tce->generator.data, tce->generator.len);
	v = BigIntegerFromInt(0);

	SHA1Init(&ctxt);
	SHA1Update(&ctxt, (unsigned char *) username, strlen(username));
	SHA1Update(&ctxt, (unsigned char *) ":", 1);
	SHA1Update(&ctxt, (unsigned char *) password, strlen(password));
	SHA1Final(dig, &ctxt);

	SHA1Init(&ctxt);
	SHA1Update(&ctxt, saltbuf, tpe.salt.len);
	SHA1Update(&ctxt, dig, sizeof(dig));
	SHA1Final(dig, &ctxt);

	/* x = H(s, H(u, ':', p)) */
	x = BigIntegerFromBytes(dig, sizeof(dig));

	BigIntegerModExp(v, g, x, n);
	tpe.password.len = BigIntegerToBytes(v, (unsigned char *)pwbuf);

	BigIntegerFree(v);
	BigIntegerFree(x);
	BigIntegerFree(g);
	BigIntegerFree(n);
	return true;
}
