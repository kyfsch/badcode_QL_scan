fis_remap(struct fis_part *old, int n_old, struct fis_part *new, int n_new)
{
	struct fis_image_desc *first = NULL;
	struct fis_image_desc *last = NULL;
	struct fis_image_desc *first_fb = NULL;
	struct fis_image_desc *last_fb = NULL;
	struct fis_image_desc *desc;
	struct fis_part *part;
	uint32_t offset = 0, size = 0;
	char *start, *end, *tmp;
	int i;

	desc = fis_open();
	if (!desc)
		return -1;

	if (!quiet)
		fprintf(stderr, "Updating FIS table... \n");

	start = (char *) desc;
	end = (char *) desc + fis_erasesize;
	while ((char *) desc < end) {
		if (!desc->hdr.name[0] || (desc->hdr.name[0] == 0xff))
			break;

		/* update max offset */
		if (offset < desc->hdr.flash_base)
			offset = desc->hdr.flash_base;

		for (i = 0; i < n_old; i++) {
			if (!strncmp((char *) desc->hdr.name, (char *) old[i].name, sizeof(desc->hdr.name))) {
				last = desc;
				if (!first)
					first = desc;
				break;
			}
		}
		desc++;
	}
	desc--;

	first_fb = first;
	last_fb = last;

	if (first_fb->hdr.flash_base > last_fb->hdr.flash_base) {
		first_fb = last;
		last_fb = first;
	}

	/* determine size of available space */
	desc = (struct fis_image_desc *) start;
	while ((char *) desc < end) {
		if (!desc->hdr.name[0] || (desc->hdr.name[0] == 0xff))
			break;

		if (desc->hdr.flash_base > last_fb->hdr.flash_base &&
		    desc->hdr.flash_base < offset)
			offset = desc->hdr.flash_base;

		desc++;
	}
	desc--;

	size = offset - first_fb->hdr.flash_base;

	last++;
	desc = first + n_new;
	offset = first_fb->hdr.flash_base;

	if (desc != last) {
		if (desc > last)
			tmp = (char *) desc;
		else
			tmp = (char *) last;

		memmove(desc, last, end - tmp);
		if (desc < last) {
			tmp = end - (last - desc) * sizeof(struct fis_image_desc);
			memset(tmp, 0xff, tmp - end);
		}
	}

	for (part = new, desc = first; desc < first + n_new; desc++, part++) {
		memset(desc, 0, sizeof(struct fis_image_desc));
		memcpy(desc->hdr.name, part->name, sizeof(desc->hdr.name));
		desc->crc.desc = 0;
		desc->crc.file = part->crc;

		desc->hdr.flash_base = offset;
		desc->hdr.mem_base = part->loadaddr;
		desc->hdr.entry_point = part->loadaddr;
		desc->hdr.size = (part->size > 0) ? part->size : size;
		desc->hdr.data_length = (part->length > 0) ? part->length :
								desc->hdr.size;
		offset += desc->hdr.size;
		size -= desc->hdr.size;
	}

	msync(fis_desc, fis_erasesize, MS_SYNC|MS_INVALIDATE);
	fis_close();

	return 0;
}
