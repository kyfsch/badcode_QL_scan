void sata_oxnas_set_mode(struct ata_host *ah, u32 mode, u32 force)
{
	struct sata_oxnas_host_priv *host_priv = ah->private_data;
	void __iomem *core_base = host_priv->core_base;

	unsigned int *src;
	void __iomem *dst;
	unsigned int progmicrocode = 0;
	unsigned int changeparameters = 0;

	u32 previous_mode;

	/* these micro-code programs _should_ include the version word */

	/* JBOD */
	static const unsigned int jbod[] = {
		0x07B400AC, 0x0228A280, 0x00200001, 0x00204002, 0x00224001,
		0x00EE0009, 0x00724901, 0x01A24903, 0x00E40009, 0x00224001,
		0x00621120, 0x0183C908, 0x00E20005, 0x00718908, 0x0198A206,
		0x00621124, 0x0183C908, 0x00E20046, 0x00621104, 0x0183C908,
		0x00E20015, 0x00EE009D, 0x01A3E301, 0x00E2001B, 0x0183C900,
		0x00E2001B, 0x00210001, 0x00EE0020, 0x01A3E302, 0x00E2009D,
		0x0183C901, 0x00E2009D, 0x00210002, 0x0235D700, 0x0208A204,
		0x0071C908, 0x000F8207, 0x000FC207, 0x0071C920, 0x000F8507,
		0x000FC507, 0x0228A240, 0x02269A40, 0x00094004, 0x00621104,
		0x0180C908, 0x00E40031, 0x00621112, 0x01A3C801, 0x00E2002B,
		0x00294000, 0x0228A220, 0x01A69ABF, 0x002F8000, 0x002FC000,
		0x0198A204, 0x0001C022, 0x01B1A220, 0x0001C106, 0x00088007,
		0x0183C903, 0x00E2009D, 0x0228A220, 0x0071890C, 0x0208A206,
		0x0198A206, 0x0001C022, 0x01B1A220, 0x0001C106, 0x00088007,
		0x00EE009D, 0x00621104, 0x0183C908, 0x00E2004A, 0x00EE009D,
		0x01A3C901, 0x00E20050, 0x0021E7FF, 0x0183E007, 0x00E2009D,
		0x00EE0054, 0x0061600B, 0x0021E7FF, 0x0183C507, 0x00E2009D,
		0x01A3E301, 0x00E2005A, 0x0183C900, 0x00E2005A, 0x00210001,
		0x00EE005F, 0x01A3E302, 0x00E20005, 0x0183C901, 0x00E20005,
		0x00210002, 0x0235D700, 0x0208A204, 0x000F8109, 0x000FC109,
		0x0071C918, 0x000F8407, 0x000FC407, 0x0001C022, 0x01A1A2BF,
		0x0001C106, 0x00088007, 0x02269A40, 0x00094004, 0x00621112,
		0x01A3C801, 0x00E4007F, 0x00621104, 0x0180C908, 0x00E4008D,
		0x00621128, 0x0183C908, 0x00E2006C, 0x01A3C901, 0x00E2007B,
		0x0021E7FF, 0x0183E007, 0x00E2007F, 0x00EE006C, 0x0061600B,
		0x0021E7FF, 0x0183C507, 0x00E4006C, 0x00621111, 0x01A3C801,
		0x00E2007F, 0x00621110, 0x01A3C801, 0x00E20082, 0x0228A220,
		0x00621119, 0x01A3C801, 0x00E20086, 0x0001C022, 0x01B1A220,
		0x0001C106, 0x00088007, 0x0198A204, 0x00294000, 0x01A69ABF,
		0x002F8000, 0x002FC000, 0x0183C903, 0x00E20005, 0x0228A220,
		0x0071890C, 0x0208A206, 0x0198A206, 0x0001C022, 0x01B1A220,
		0x0001C106, 0x00088007, 0x00EE009D, 0x00621128, 0x0183C908,
		0x00E20005, 0x00621104, 0x0183C908, 0x00E200A6, 0x0062111C,
		0x0183C908, 0x00E20005, 0x0071890C, 0x0208A206, 0x0198A206,
		0x00718908, 0x0208A206, 0x00EE0005, ~0
	};

	/* Bi-Modal RAID-0/1 */
	static const unsigned int raid[] = {
		0x00F20145, 0x00EE20FA, 0x00EE20A7, 0x0001C009, 0x00EE0004,
		0x00220000, 0x0001000B, 0x037003FF, 0x00700018, 0x037003FE,
		0x037043FD, 0x00704118, 0x037043FC, 0x01A3D240, 0x00E20017,
		0x00B3C235, 0x00E40018, 0x0093C104, 0x00E80014, 0x0093C004,
		0x00E80017, 0x01020000, 0x00274020, 0x00EE0083, 0x0080C904,
		0x0093C104, 0x00EA0020, 0x0093C103, 0x00EC001F, 0x00220002,
		0x00924104, 0x0005C009, 0x00EE0058, 0x0093CF04, 0x00E80026,
		0x00900F01, 0x00600001, 0x00910400, 0x00EE0058, 0x00601604,
		0x01A00003, 0x00E2002C, 0x01018000, 0x00274040, 0x00EE0083,
		0x0093CF03, 0x00EC0031, 0x00220003, 0x00924F04, 0x0005C009,
		0x00810104, 0x00B3C235, 0x00E20037, 0x0022C000, 0x00218210,
		0x00EE0039, 0x0022C001, 0x00218200, 0x00600401, 0x00A04901,
		0x00604101, 0x01A0C401, 0x00E20040, 0x00216202, 0x00EE0041,
		0x00216101, 0x02018506, 0x00EE2141, 0x00904901, 0x00E20049,
		0x00A00401, 0x00600001, 0x02E0C301, 0x00EE2141, 0x00216303,
		0x037003EE, 0x01A3C001, 0x00E40105, 0x00250080, 0x00204000,
		0x002042F1, 0x0004C001, 0x00230001, 0x00100006, 0x02C18605,
		0x00100006, 0x01A3D502, 0x00E20055, 0x00EE0053, 0x00004009,
		0x00000004, 0x00B3C235, 0x00E40062, 0x0022C001, 0x0020C000,
		0x00EE2141, 0x0020C001, 0x00EE2141, 0x00EE006B, 0x0022C000,
		0x0060D207, 0x00EE2141, 0x00B3C242, 0x00E20069, 0x01A3D601,
		0x00E2006E, 0x02E0C301, 0x00EE2141, 0x00230001, 0x00301303,
		0x00EE007B, 0x00218210, 0x01A3C301, 0x00E20073, 0x00216202,
		0x00EE0074, 0x00216101, 0x02018506, 0x00214000, 0x037003EE,
		0x01A3C001, 0x00E40108, 0x00230001, 0x00100006, 0x00250080,
		0x00204000, 0x002042F1, 0x0004C001, 0x00EE007F, 0x0024C000,
		0x01A3D1F0, 0x00E20088, 0x00230001, 0x00300000, 0x01A3D202,
		0x00E20085, 0x00EE00A5, 0x00B3C800, 0x00E20096, 0x00218000,
		0x00924709, 0x0005C009, 0x00B20802, 0x00E40093, 0x037103FD,
		0x00710418, 0x037103FC, 0x00EE0006, 0x00220000, 0x0001000F,
		0x00EE0006, 0x00800B0C, 0x00B00001, 0x00204000, 0x00208550,
		0x00208440, 0x002083E0, 0x00208200, 0x00208100, 0x01008000,
		0x037083EE, 0x02008212, 0x02008216, 0x01A3C201, 0x00E400A5,
		0x0100C000, 0x00EE20FA, 0x02800000, 0x00208000, 0x00B24C00,
		0x00E400AD, 0x00224001, 0x00724910, 0x0005C009, 0x00B3CDC4,
		0x00E200D5, 0x00B3CD29, 0x00E200D5, 0x00B3CD20, 0x00E200D5,
		0x00B3CD24, 0x00E200D5, 0x00B3CDC5, 0x00E200D2, 0x00B3CD39,
		0x00E200D2, 0x00B3CD30, 0x00E200D2, 0x00B3CD34, 0x00E200D2,
		0x00B3CDCA, 0x00E200CF, 0x00B3CD35, 0x00E200CF, 0x00B3CDC8,
		0x00E200CC, 0x00B3CD25, 0x00E200CC, 0x00B3CD40, 0x00E200CB,
		0x00B3CD42, 0x00E200CB, 0x01018000, 0x00EE0083, 0x0025C000,
		0x036083EE, 0x0000800D, 0x00EE00D8, 0x036083EE, 0x00208035,
		0x00EE00DA, 0x036083EE, 0x00208035, 0x00EE00DA, 0x00208007,
		0x036083EE, 0x00208025, 0x036083EF, 0x02400000, 0x01A3D208,
		0x00E200D8, 0x0067120A, 0x0021C000, 0x0021C224, 0x00220000,
		0x00404B1C, 0x00600105, 0x00800007, 0x0020C00E, 0x00214000,
		0x01004000, 0x01A0411F, 0x00404E01, 0x01A3C101, 0x00E200F1,
		0x00B20800, 0x00E400D8, 0x00220001, 0x0080490B, 0x00B04101,
		0x0040411C, 0x00EE00E1, 0x02269A01, 0x01020000, 0x02275D80,
		0x01A3D202, 0x00E200F4, 0x01B75D80, 0x01030000, 0x01B69A01,
		0x00EE00D8, 0x01A3D204, 0x00E40104, 0x00224000, 0x0020C00E,
		0x0020001E, 0x00214000, 0x01004000, 0x0212490E, 0x00214001,
		0x01004000, 0x02400000, 0x00B3D702, 0x00E80112, 0x00EE010E,
		0x00B3D702, 0x00E80112, 0x00B3D702, 0x00E4010E, 0x00230001,
		0x00EE0140, 0x00200005, 0x036003EE, 0x00204001, 0x00EE0116,
		0x00230001, 0x00100006, 0x02C18605, 0x00100006, 0x01A3D1F0,
		0x00E40083, 0x037003EE, 0x01A3C002, 0x00E20121, 0x0020A300,
		0x0183D102, 0x00E20124, 0x037003EE, 0x01A00005, 0x036003EE,
		0x01A0910F, 0x00B3C20F, 0x00E2012F, 0x01A3D502, 0x00E20116,
		0x01A3C002, 0x00E20116, 0x00B3D702, 0x00E4012C, 0x00300000,
		0x00EE011F, 0x02C18605, 0x00100006, 0x00EE0116, 0x01A3D1F0,
		0x00E40083, 0x037003EE, 0x01A3C004, 0x00E20088, 0x00200003,
		0x036003EE, 0x01A3D502, 0x00E20136, 0x00230001, 0x00B3C101,
		0x00E4012C, 0x00100006, 0x02C18605, 0x00100006, 0x00204000,
		0x00EE0116, 0x00100006, 0x01A3D1F0, 0x00E40083, 0x01000000,
		0x02400000, ~0
	};

	DPRINTK("ENTER: mode:%d, force:%d\n", mode, force);

	if (force)
		previous_mode = UNKNOWN_MODE;
	else
		previous_mode = host_priv->current_ucode;

	if (mode == previous_mode)
		return;

	host_priv->current_ucode = mode;

	/* decide what needs to be done using the STD in my logbook */
	switch (previous_mode) {
	case OXNASSATA_RAID1:
		switch (mode) {
		case OXNASSATA_RAID0:
			changeparameters = 1;
			break;
		case OXNASSATA_NOTRAID:
			changeparameters = 1;
			progmicrocode = 1;
			break;
		}
		break;
	case OXNASSATA_RAID0:
		switch (mode) {
		case OXNASSATA_RAID1:
			changeparameters = 1;
			break;
		case OXNASSATA_NOTRAID:
			changeparameters = 1;
			progmicrocode = 1;
			break;
		}
		break;
	case OXNASSATA_NOTRAID:
		switch (mode) {
		case OXNASSATA_RAID0:
		case OXNASSATA_RAID1:
			changeparameters = 1;
			progmicrocode = 1;
			break;
		}
		break;
	case UNKNOWN_MODE:
		changeparameters = 1;
		progmicrocode = 1;
		break;
	}

	/* no need to reprogram everything if already in the right mode */
	if (progmicrocode) {
		/* reset micro-code processor */
		iowrite32(1, core_base + PROC_RESET);
		wmb();

		/* select micro-code */
		switch (mode) {
		case OXNASSATA_RAID1:
		case OXNASSATA_RAID0:
			VPRINTK("Loading RAID micro-code\n");
			src = (unsigned int *)&raid[1];
			break;
		case OXNASSATA_NOTRAID:
			VPRINTK("Loading JBOD micro-code\n");
			src = (unsigned int *)&jbod[1];
			break;
		default:
			BUG();
			break;
		}

		/* load micro code */
		dst = core_base + UCODE_STORE;
		while (*src != ~0) {
			iowrite32(*src, dst);
			src++;
			dst += sizeof(*src);
		}
		wmb();
	}

	if (changeparameters) {
		u32 reg;
		/* set other mode dependent flags */
		switch (mode) {
		case OXNASSATA_RAID1:
			/* clear JBOD mode */
			reg = ioread32(core_base + DATA_PLANE_CTRL);
			reg |= DPC_JBOD_UCODE;
			reg &= ~DPC_FIS_SWCH;
			iowrite32(reg, core_base + DATA_PLANE_CTRL);
			wmb();

			/* set the hardware up for RAID-1 */
			iowrite32(0, core_base + RAID_WP_BOT_LOW);
			iowrite32(0, core_base + RAID_WP_BOT_HIGH);
			iowrite32(0xffffffff, core_base + RAID_WP_TOP_LOW);
			iowrite32(0x7fffffff, core_base + RAID_WP_TOP_HIGH);
			iowrite32(0, core_base + RAID_SIZE_LOW);
			iowrite32(0, core_base + RAID_SIZE_HIGH);
			wmb();
			break;
		case OXNASSATA_RAID0:
			/* clear JBOD mode */
			reg = ioread32(core_base + DATA_PLANE_CTRL);
			reg |= DPC_JBOD_UCODE;
			reg &= ~DPC_FIS_SWCH;
			iowrite32(reg, core_base + DATA_PLANE_CTRL);
			wmb();

			/* set the hardware up for RAID-1 */
			iowrite32(0, core_base + RAID_WP_BOT_LOW);
			iowrite32(0, core_base + RAID_WP_BOT_HIGH);
			iowrite32(0xffffffff, core_base + RAID_WP_TOP_LOW);
			iowrite32(0x7fffffff, core_base + RAID_WP_TOP_HIGH);
			iowrite32(0xffffffff, core_base + RAID_SIZE_LOW);
			iowrite32(0x7fffffff, core_base + RAID_SIZE_HIGH);
			wmb();
			break;
		case OXNASSATA_NOTRAID:
			/* enable jbod mode */
			reg = ioread32(core_base + DATA_PLANE_CTRL);
			reg &= ~DPC_JBOD_UCODE;
			reg &= ~DPC_FIS_SWCH;
			iowrite32(reg, core_base + DATA_PLANE_CTRL);
			wmb();

			/* start micro-code processor*/
			iowrite32(1, core_base + PROC_START);
			break;
		default:
			reg = ioread32(core_base + DATA_PLANE_CTRL);
			reg |= DPC_JBOD_UCODE;
			reg &= ~DPC_FIS_SWCH;
			iowrite32(reg, core_base + DATA_PLANE_CTRL);
			wmb();
			break;
		}
	}
}
