hostapd_bss_transition_request(struct ubus_context *ctx, struct ubus_object *obj,
			       struct ubus_request_data *ureq, const char *method,
			       struct blob_attr *msg)
{
	struct hostapd_data *hapd = container_of(obj, struct hostapd_data, ubus.obj);
	struct blob_attr *tb[__BSS_TR_DISASSOC_MAX];
	struct sta_info *sta;
	u32 da_timer = 0;
	u32 valid_period = 0;
	u8 addr[ETH_ALEN];
	u32 dialog_token = 1;
	bool abridged;
	bool da_imminent;
	u8 mbo_reason;
	u8 cell_pref;
	u8 reassoc_delay;

	blobmsg_parse(bss_tr_policy, __BSS_TR_DISASSOC_MAX, tb, blob_data(msg), blob_len(msg));

	if (!tb[BSS_TR_ADDR])
		return UBUS_STATUS_INVALID_ARGUMENT;

	if (hwaddr_aton(blobmsg_data(tb[BSS_TR_ADDR]), addr))
		return UBUS_STATUS_INVALID_ARGUMENT;

	if (tb[BSS_TR_DA_TIMER])
		da_timer = blobmsg_get_u32(tb[BSS_TR_DA_TIMER]);

	if (tb[BSS_TR_VALID_PERIOD])
		valid_period = blobmsg_get_u32(tb[BSS_TR_VALID_PERIOD]);

	if (tb[BSS_TR_DIALOG_TOKEN])
		dialog_token = blobmsg_get_u32(tb[BSS_TR_DIALOG_TOKEN]);

	da_imminent = !!(tb[BSS_TR_DA_IMMINENT] && blobmsg_get_bool(tb[BSS_TR_DA_IMMINENT]));
	abridged = !!(tb[BSS_TR_ABRIDGED] && blobmsg_get_bool(tb[BSS_TR_ABRIDGED]));

#ifdef CONFIG_MBO
	if (tb[BSS_TR_MBO_REASON])
		mbo_reason = blobmsg_get_u32(tb[BSS_TR_MBO_REASON]);

	if (tb[BSS_TR_CELL_PREF])
		cell_pref = blobmsg_get_u32(tb[BSS_TR_CELL_PREF]);

	if (tb[BSS_TR_REASSOC_DELAY])
		reassoc_delay = blobmsg_get_u32(tb[BSS_TR_REASSOC_DELAY]);
#endif

	return hostapd_bss_tr_send(hapd, addr, da_imminent, abridged, da_timer, valid_period,
				   dialog_token, tb[BSS_TR_NEIGHBORS], mbo_reason, cell_pref, reassoc_delay);
}
