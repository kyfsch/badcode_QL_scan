ret_t rtl8367c_setAsicGreenEthernet(rtk_uint32 port, rtk_uint32 green)
{
    ret_t retVal;
    rtk_uint32 checkCounter;
    rtk_uint32 regData;
    rtk_uint32 phy_status;
    rtk_uint32 patchData[6][2] = { {0x809A, 0x8911}, {0x80A3, 0x9233}, {0x80AC, 0xA444}, {0x809F, 0x6B20}, {0x80A8, 0x6B22}, {0x80B1, 0x6B23} };
    rtk_uint32 idx;
    rtk_uint32 data;

    if (green > 1)
        return RT_ERR_INPUT;

    /* 0xa420[2:0] */
    if((retVal = rtl8367c_getAsicPHYOCPReg(port, 0xA420, &regData)) != RT_ERR_OK)
        return retVal;
    phy_status = (regData & 0x0007);

    if(phy_status == 3)
    {
        /* 0xb820[4] = 1 */
        if((retVal = rtl8367c_getAsicPHYOCPReg(port, 0xB820, &regData)) != RT_ERR_OK)
            return retVal;

        regData |= (0x0001 << 4);

        if((retVal = rtl8367c_setAsicPHYOCPReg(port, 0xB820, regData)) != RT_ERR_OK)
            return retVal;

        /* wait 0xb800[6] = 1 */
        checkCounter = 100;
        while(checkCounter)
        {
            retVal = rtl8367c_getAsicPHYOCPReg(port, 0xB800, &regData);
            if( (retVal != RT_ERR_OK) || ((regData & 0x0040) != 0x0040) )
            {
                checkCounter --;
                if(0 == checkCounter)
                    return RT_ERR_BUSYWAIT_TIMEOUT;
            }
            else
                checkCounter = 0;
        }
    }

    if((retVal = rtl8367c_setAsicReg(0x13C2, 0x0249)) != RT_ERR_OK)
        return retVal;

    if((retVal = rtl8367c_getAsicReg(0x1300, &data)) != RT_ERR_OK)
        return retVal;

    if((retVal = rtl8367c_setAsicReg(0x13C2, 0x0000)) != RT_ERR_OK)
        return retVal;

    switch (data)
    {
        case 0x0276:
        case 0x0597:
        case 0x6367:
            if(green)
            {
                for(idx = 0; idx < 6; idx++ )
                {
                    if((retVal = rtl8367c_setAsicPHYOCPReg(port, 0xA436, patchData[idx][0])) != RT_ERR_OK)
                        return retVal;

                    if((retVal = rtl8367c_setAsicPHYOCPReg(port, 0xA438, patchData[idx][1])) != RT_ERR_OK)
                        return retVal;
                }
            }
            break;
        default:
            break;;
    }



    /* 0xa436 = 0x8011 */
    if((retVal = rtl8367c_setAsicPHYOCPReg(port, 0xA436, 0x8011)) != RT_ERR_OK)
        return retVal;

    /* wr 0xa438[15] = 0: disable, 1: enable */
    if((retVal = rtl8367c_getAsicPHYOCPReg(port, 0xA438, &regData)) != RT_ERR_OK)
        return retVal;

    if(green)
        regData |= 0x8000;
    else
        regData &= 0x7FFF;

    if((retVal = rtl8367c_setAsicPHYOCPReg(port, 0xA438, regData)) != RT_ERR_OK)
        return retVal;

    if(phy_status == 3)
    {
        /* 0xb820[4] = 0  */
        if((retVal = rtl8367c_getAsicPHYOCPReg(port, 0xB820, &regData)) != RT_ERR_OK)
            return retVal;

        regData &= ~(0x0001 << 4);

        if((retVal = rtl8367c_setAsicPHYOCPReg(port, 0xB820, regData)) != RT_ERR_OK)
            return retVal;

        /* wait 0xb800[6] = 0 */
        checkCounter = 100;
        while(checkCounter)
        {
            retVal = rtl8367c_getAsicPHYOCPReg(port, 0xB800, &regData);
            if( (retVal != RT_ERR_OK) || ((regData & 0x0040) != 0x0000) )
            {
                checkCounter --;
                if(0 == checkCounter)
                    return RT_ERR_BUSYWAIT_TIMEOUT;
            }
            else
                checkCounter = 0;
        }
    }

    return RT_ERR_OK;
}
