static void ddr_normal_initialisation(
	const T_DDR_CONFIG_PARAMETERS *ddr_config_parameters, int mhz)
{
	int i;
	volatile UINT tmp = 0;
	volatile UINT reg_tmp = 0;
	volatile UINT emr_cmd = 0;
	UINT refresh;

	//Total size of memory in Mbits...
	tmp = ddr_config_parameters->rams * ddr_config_parameters->asize
		* ddr_config_parameters->width;
	//Deduce value to program into DDR_CFG register...
	switch (tmp) {
	case 16:
		reg_tmp = 0x00020000 * 1;
		break;
	case 32:
		reg_tmp = 0x00020000 * 2;
		break;
	case 64:
		reg_tmp = 0x00020000 * 3;
		break;
	case 128:
		reg_tmp = 0x00020000 * 4;
		break;
	case 256:
		reg_tmp = 0x00020000 * 5;
		break;
	case 512:
		reg_tmp = 0x00020000 * 6;
		break;
	case 1024:
		reg_tmp = 0x00020000 * 7;
		break;
	case 2048:
		reg_tmp = 0x00020000 * 8;
		break;
	default:
		reg_tmp = 0; //forces sims not to work if badly configured
	}

	//Memory width
	tmp = ddr_config_parameters->rams * ddr_config_parameters->width;
	switch (tmp) {
	case 8:
		reg_tmp = reg_tmp + 0x00400000;
		break;
	case 16:
		reg_tmp = reg_tmp + 0x00200000;
		break;
	case 32:
		reg_tmp = reg_tmp + 0x00000000;
		break;
	default:
		reg_tmp = 0; //forces sims not to work if badly configured
	}

	//Setup DDR Mode
	switch (ddr_config_parameters->ddr_mode) {
	case 0:
		reg_tmp = reg_tmp + 0x00000000;
		break;   //SDR
	case 1:
		reg_tmp = reg_tmp + 0x40000000;
		break;   //DDR
	case 2:
		reg_tmp = reg_tmp + 0x80000000;
		break;   //DDR2
	default:
		reg_tmp = 0; //forces sims not to work if badly configured
	}

	//Setup Banks
	if (ddr_config_parameters->banks8 == 1) {
		reg_tmp = reg_tmp + 0x00800000;
	}

	//Program DDR_CFG register...
	*(volatile UINT *) C_DDR_CFG_REG = reg_tmp;

	//Configure PHY0 reg - se_mode is bit 1,
	//needs to be 1 for DDR (single_ended drive)
	switch (ddr_config_parameters->ddr_mode) {
	case 0:
		reg_tmp = 2 + (0 << 4);
		break;   //SDR
	case 1:
		reg_tmp = 2 + (4 << 4);
		break;   //DDR
	case 2:
		reg_tmp = 0 + (4 << 4);
		break;   //DDR2
	default:
		reg_tmp = 0;
	}

	//Program DDR_PHY0 register...
	*(volatile UINT *) C_DDR_REG_PHY0 = reg_tmp;

	//Read DDR_PHY* registers to exercise paths for vcd
	reg_tmp = *(volatile UINT *) C_DDR_REG_PHY3;
	reg_tmp = *(volatile UINT *) C_DDR_REG_PHY2;
	reg_tmp = *(volatile UINT *) C_DDR_REG_PHY1;
	reg_tmp = *(volatile UINT *) C_DDR_REG_PHY0;

	//Start up sequences - Different dependant on DDR mode
	switch (ddr_config_parameters->ddr_mode) {
	case 2:   //DDR2
		//Start-up sequence: follows procedure described in Micron datasheet.
		//start up DDR PHY DLL
		reg_tmp = 0x00022828;       // dll on, start point and inc = h28
		*(volatile UINT *) C_DDR_REG_PHY2 = reg_tmp;

		reg_tmp = 0x00032828; // start on, dll on, start point and inc = h28
		*(volatile UINT *) C_DDR_REG_PHY2 = reg_tmp;

		ddr_phy_poll_until_locked();

		udelay(200);   //200us

		//Startup SDRAM...
		//!!! Software: CK should be running for 200us before wake-up
		ddr_issue_command( C_CMD_WAKE_UP);
		ddr_issue_command( C_CMD_NOP);
		ddr_issue_command( C_CMD_PRECHARGE_ALL);
		ddr_issue_command( C_CMD_DDR2_EMR2);
		ddr_issue_command( C_CMD_DDR2_EMR3);

		emr_cmd = C_CMD_DDR2_EMR1 + C_CMD_ODT_75 + C_CMD_REDUCED_DRIVE
			+ C_CMD_ENABLE_DLL;

		ddr_issue_command(emr_cmd);
		//Sets CL=3; BL=8 but also reset DLL to trigger a DLL initialisation...
		udelay(1);   //1us
		ddr_issue_command(
			ddr_config_parameters->cmd_mode_wr_cl_bl
			+ C_CMD_RESET_DLL);
		udelay(1);   //1us

		//!!! Software: Wait 200 CK cycles before...
		//for(i=1; i<=2; i++) {
		ddr_issue_command(C_CMD_PRECHARGE_ALL);
		// !!! Software: Wait here at least 8 CK cycles
		//}
		//need a wait here to ensure PHY DLL lock before the refresh is issued
		udelay(1);   //1us
		for (i = 1; i <= 2; i++) {
			ddr_issue_command( C_CMD_AUTO_REFRESH);
			//!!! Software: Wait here at least 8 CK cycles to satify tRFC
			udelay(1);   //1us
		}
		//As before but without 'RESET_DLL' bit set...
		ddr_issue_command(ddr_config_parameters->cmd_mode_wr_cl_bl);
		udelay(1);   //1us
		// OCD commands
		ddr_issue_command(emr_cmd + C_CMD_MODE_DDR2_OCD_DFLT);
		ddr_issue_command(emr_cmd + C_CMD_MODE_DDR2_OCD_EXIT);
		break;

	default:
		break;  //Do nothing
	}

	//Enable auto-refresh

	// 8192 Refreshes required every 64ms, so maximum refresh period is 7.8125 us
	// We have a 400 MHz DDR clock (2.5ns period) so max period is 3125 cycles
	// Our core now does 8 refreshes in a go, so we multiply this period by 8

	refresh = (64000 * mhz) / 8192; // Refresh period in clocks

	reg_tmp = *(volatile UINT *) C_DDR_CFG_REG;      // read
#ifdef BURST_REFRESH_ENABLE
	reg_tmp |= C_CFG_REFRESH_ENABLE | (refresh * 8);
	reg_tmp |= C_CFG_BURST_REFRESH_ENABLE;
#else
	reg_tmp |= C_CFG_REFRESH_ENABLE | (refresh * 1);
	reg_tmp &= ~C_CFG_BURST_REFRESH_ENABLE;
#endif
	*(volatile UINT *) C_DDR_CFG_REG = reg_tmp;

	//Verify register contents
	reg_tmp = *(volatile UINT *) C_DDR_REG_PHY2;      // read
	//printf("Warning XXXXXXXXXXXXXXXXXXXXXX - get bad read data from C_DDR_PHY2_REG, though it looks OK on bus XXXXXXXXXXXXXXXXXX");
	//TBD   Check_data (read_data,  dll_reg, "Error: bad C_DDR_PHY2_REG read", tb_pass);
	reg_tmp = *(volatile UINT *) C_DDR_CFG_REG;      // read
	//TBD   Check_data (read_data,  cfg_reg, "Error: bad DDR_CFG read", tb_pass);

	//disable optimised wrapping
	if (ddr_config_parameters->ddr_mode == 2) {
		reg_tmp = 0xFFFF0000;
		*(volatile UINT *) C_DDR_REG_IGNORE = reg_tmp;
	}

	//enable midbuffer followon
	reg_tmp = *(volatile UINT *) C_DDR_ARB_REG;      // read
	reg_tmp = 0xFFFF0000 | reg_tmp;
	*(volatile UINT *) C_DDR_ARB_REG = reg_tmp;

	// Enable write behind coherency checking for all clients

	reg_tmp = 0xFFFF0000;
	*(volatile UINT *) C_DDR_AHB4_REG = reg_tmp;

	//Wait for 200 clock cycles for SDRAM DLL to lock...
	udelay(1);   //1us
}
