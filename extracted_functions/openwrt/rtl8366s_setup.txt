static int rtl8366s_setup(struct rtl8366_smi *smi)
{
	struct rtl8366_platform_data *pdata;
	int err;
	unsigned i;
#ifdef CONFIG_OF
	struct device_node *np;
	unsigned num_initvals;
	const __be32 *paddr;
#endif

	pdata = smi->parent->platform_data;
	if (pdata && pdata->num_initvals && pdata->initvals) {
		dev_info(smi->parent, "applying initvals\n");
		for (i = 0; i < pdata->num_initvals; i++)
			REG_WR(smi, pdata->initvals[i].reg,
			       pdata->initvals[i].val);
	}

#ifdef CONFIG_OF
	np = smi->parent->of_node;

	paddr = of_get_property(np, "realtek,initvals", &num_initvals);
	if (paddr) {
		dev_info(smi->parent, "applying initvals from DTS\n");

		if (num_initvals < (2 * sizeof(*paddr)))
			return -EINVAL;

		num_initvals /= sizeof(*paddr);

		for (i = 0; i < num_initvals - 1; i += 2) {
			u32 reg = be32_to_cpup(paddr + i);
			u32 val = be32_to_cpup(paddr + i + 1);

			REG_WR(smi, reg, val);
		}
	}

	if (of_property_read_bool(np, "realtek,green-ethernet-features")) {
		dev_info(smi->parent, "activating Green Ethernet features\n");

		err = rtl8366s_set_green(smi, 1);
		if (err)
			return err;

		for (i = 0; i <= RTL8366S_PHY_NO_MAX; i++) {
			err = rtl8366s_set_green_port(smi, i, 1);
			if (err)
				return err;
		}
	}
#endif

	/* set maximum packet length to 1536 bytes */
	REG_RMW(smi, RTL8366S_SGCR, RTL8366S_SGCR_MAX_LENGTH_MASK,
		RTL8366S_SGCR_MAX_LENGTH_1536);

	/* enable learning for all ports */
	REG_WR(smi, RTL8366S_SSCR0, 0);

	/* enable auto ageing for all ports */
	REG_WR(smi, RTL8366S_SSCR1, 0);

	/*
	 * discard VLAN tagged packets if the port is not a member of
	 * the VLAN with which the packets is associated.
	 */
	REG_WR(smi, RTL8366S_VLAN_MEMBERINGRESS_REG, RTL8366S_PORT_ALL);

	/* don't drop packets whose DA has not been learned */
	REG_RMW(smi, RTL8366S_SSCR2, RTL8366S_SSCR2_DROP_UNKNOWN_DA, 0);

	return 0;
}
