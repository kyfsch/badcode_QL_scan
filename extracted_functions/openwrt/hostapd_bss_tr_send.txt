hostapd_bss_tr_send(struct hostapd_data *hapd, u8 *addr, bool disassoc_imminent, bool abridged,
		    u16 disassoc_timer, u8 validity_period, u8 dialog_token,
		    struct blob_attr *neighbors, u8 mbo_reason, u8 cell_pref, u8 reassoc_delay)
{
	struct blob_attr *cur;
	struct sta_info *sta;
	int nr_len = 0;
	int rem;
	u8 *nr = NULL;
	u8 req_mode = 0;
	u8 mbo[10];
	size_t mbo_len = 0;

	sta = ap_get_sta(hapd, addr);
	if (!sta)
		return UBUS_STATUS_NOT_FOUND;

	if (neighbors) {
		u8 *nr_cur;

		if (blobmsg_check_array(neighbors,
					BLOBMSG_TYPE_STRING) < 0)
			return UBUS_STATUS_INVALID_ARGUMENT;

		blobmsg_for_each_attr(cur, neighbors, rem) {
			int len = strlen(blobmsg_get_string(cur));

			if (len % 2)
				return UBUS_STATUS_INVALID_ARGUMENT;

			nr_len += (len / 2) + 2;
		}

		if (nr_len) {
			nr = os_zalloc(nr_len);
			if (!nr)
				return UBUS_STATUS_UNKNOWN_ERROR;
		}

		nr_cur = nr;
		blobmsg_for_each_attr(cur, neighbors, rem) {
			int len = strlen(blobmsg_get_string(cur)) / 2;

			*nr_cur++ = WLAN_EID_NEIGHBOR_REPORT;
			*nr_cur++ = (u8) len;
			if (hexstr2bin(blobmsg_data(cur), nr_cur, len)) {
				free(nr);
				return UBUS_STATUS_INVALID_ARGUMENT;
			}

			nr_cur += len;
		}
	}

	if (nr)
		req_mode |= WNM_BSS_TM_REQ_PREF_CAND_LIST_INCLUDED;

	if (abridged)
		req_mode |= WNM_BSS_TM_REQ_ABRIDGED;

	if (disassoc_imminent)
		req_mode |= WNM_BSS_TM_REQ_DISASSOC_IMMINENT;

#ifdef CONFIG_MBO
	u8 *mbo_pos = mbo;

	if (mbo_reason > MBO_TRANSITION_REASON_PREMIUM_AP)
		return UBUS_STATUS_INVALID_ARGUMENT;

	if (cell_pref != 0 && cell_pref != 1 && cell_pref != 255)
		return UBUS_STATUS_INVALID_ARGUMENT;

	if (reassoc_delay > 65535 || (reassoc_delay && !disassoc_imminent))
		return UBUS_STATUS_INVALID_ARGUMENT;

	*mbo_pos++ = MBO_ATTR_ID_TRANSITION_REASON;
	*mbo_pos++ = 1;
	*mbo_pos++ = mbo_reason;
	*mbo_pos++ = MBO_ATTR_ID_CELL_DATA_PREF;
	*mbo_pos++ = 1;
	*mbo_pos++ = cell_pref;

	if (reassoc_delay) {
		*mbo_pos++ = MBO_ATTR_ID_ASSOC_RETRY_DELAY;
		*mbo_pos++ = 2;
		WPA_PUT_LE16(mbo_pos, reassoc_delay);
		mbo_pos += 2;
	}

	mbo_len = mbo_pos - mbo;
#endif

	if (wnm_send_bss_tm_req(hapd, sta, req_mode, disassoc_timer, validity_period, NULL,
				dialog_token, NULL, nr, nr_len, mbo_len ? mbo : NULL, mbo_len))
		return UBUS_STATUS_UNKNOWN_ERROR;

	return 0;
}
