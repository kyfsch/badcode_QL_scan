mtdsplit_fit_parse(struct mtd_info *mtd,
		   const struct mtd_partition **pparts,
	           struct mtd_part_parser_data *data)
{
	struct device_node *np = mtd_get_of_node(mtd);
	const char *cmdline_match = NULL;
	struct fdt_header hdr;
	size_t hdr_len, retlen;
	size_t offset;
	u32 offset_start = 0;
	size_t fit_offset, fit_size;
	size_t rootfs_offset, rootfs_size;
	size_t data_size, img_total, max_size = 0;
	struct mtd_partition *parts;
	int ret, ndepth, noffset, images_noffset;
	const void *img_data;
	void *fit;

	of_property_read_string(np, "openwrt,cmdline-match", &cmdline_match);
	if (cmdline_match && !strstr(saved_command_line, cmdline_match))
		return -ENODEV;

	of_property_read_u32(np, "openwrt,fit-offset", &offset_start);

	hdr_len = sizeof(struct fdt_header);

	/* Parse the MTD device & search for the FIT image location */
	for(offset = 0; offset + hdr_len <= mtd->size; offset += mtd->erasesize) {
		ret = mtd_read(mtd, offset + offset_start, hdr_len, &retlen, (void*) &hdr);
		if (ret) {
			pr_err("read error in \"%s\" at offset 0x%llx\n",
			       mtd->name, (unsigned long long) offset);
			return ret;
		}

		if (retlen != hdr_len) {
			pr_err("short read in \"%s\"\n", mtd->name);
			return -EIO;
		}

		/* Check the magic - see if this is a FIT image */
		if (be32_to_cpu(hdr.magic) != OF_DT_HEADER) {
			pr_debug("no valid FIT image found in \"%s\" at offset %llx\n",
				 mtd->name, (unsigned long long) offset);
			continue;
		}

		/* We found a FIT image. Let's keep going */
		break;
	}

	fit_offset = offset;
	fit_size = be32_to_cpu(hdr.totalsize);

	if (fit_size == 0) {
		pr_err("FIT image in \"%s\" at offset %llx has null size\n",
		       mtd->name, (unsigned long long) fit_offset);
		return -ENODEV;
	}

	/*
	 * Classic uImage.FIT has all data embedded into the FDT
	 * data structure. Hence the total size of the image equals
	 * the total size of the FDT structure.
	 * Modern uImage.FIT may have only references to data in FDT,
	 * hence we need to parse FDT structure to find the end of the
	 * last external data refernced.
	 */
	if (fit_size > 0x1000) {
		enum mtdsplit_part_type type;

		/* Search for the rootfs partition after the FIT image */
		ret = mtd_find_rootfs_from(mtd, fit_offset + fit_size + offset_start, mtd->size,
					   &rootfs_offset, &type);
		if (ret) {
			pr_info("no rootfs found after FIT image in \"%s\"\n",
				mtd->name);
			return ret;
		}

		rootfs_size = mtd->size - rootfs_offset;

		parts = kzalloc(2 * sizeof(*parts), GFP_KERNEL);
		if (!parts)
			return -ENOMEM;

		parts[0].name = KERNEL_PART_NAME;
		parts[0].offset = fit_offset;
		parts[0].size = mtd_rounddown_to_eb(fit_size + offset_start, mtd) + mtd->erasesize;

		if (type == MTDSPLIT_PART_TYPE_UBI)
			parts[1].name = UBI_PART_NAME;
		else
			parts[1].name = ROOTFS_PART_NAME;
		parts[1].offset = rootfs_offset;
		parts[1].size = rootfs_size;

		*pparts = parts;

		return 2;
	} else {
		/* Search for rootfs_data after FIT external data */
		fit = kzalloc(fit_size, GFP_KERNEL);
		ret = mtd_read(mtd, offset, fit_size + offset_start, &retlen, fit);
		if (ret) {
			pr_err("read error in \"%s\" at offset 0x%llx\n",
			       mtd->name, (unsigned long long) offset);
			return ret;
		}

		images_noffset = fdt_path_offset(fit, FIT_IMAGES_PATH);
		if (images_noffset < 0) {
			pr_err("Can't find images parent node '%s' (%s)\n",
			FIT_IMAGES_PATH, fdt_strerror(images_noffset));
			return -ENODEV;
		}

		for (ndepth = 0,
		     noffset = fdt_next_node(fit, images_noffset, &ndepth);
		     (noffset >= 0) && (ndepth > 0);
		     noffset = fdt_next_node(fit, noffset, &ndepth)) {
			if (ndepth == 1) {
				ret = fit_image_get_data_and_size(fit, noffset, &img_data, &data_size);
				if (ret)
					return 0;

				img_total = data_size + (img_data - fit);

				max_size = (max_size > img_total) ? max_size : img_total;
			}
		}

		parts = kzalloc(sizeof(*parts), GFP_KERNEL);
		if (!parts)
			return -ENOMEM;

		parts[0].name = ROOTFS_SPLIT_NAME;
		parts[0].offset = fit_offset + mtd_rounddown_to_eb(max_size, mtd) + mtd->erasesize;
		parts[0].size = mtd->size - parts[0].offset;

		*pparts = parts;

		kfree(fit);

		return 1;
	}
}
