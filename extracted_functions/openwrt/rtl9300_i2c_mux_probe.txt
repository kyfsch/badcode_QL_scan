static int rtl9300_i2c_mux_probe(struct platform_device *pdev)
{
	struct device *dev = &pdev->dev;
	struct device_node *node = dev->of_node;
	struct device_node *parent_np;
	struct device_node *child;
	struct i2c_mux_core *muxc;
	struct rtl9300_mux *mux;
	struct i2c_mux_data *mux_data;
	int children;
	int ret;

	pr_info("%s probing I2C adapter\n", __func__);

	if (!node) {
		dev_err(dev, "No DT found\n");
		return -EINVAL;
	}

	mux = devm_kzalloc(dev, sizeof(*mux), GFP_KERNEL);
	if (!mux)
		return -ENOMEM;

	mux->dev = dev;

	mux_data = (struct i2c_mux_data *) device_get_match_data(dev);

	parent_np = mux_parent_adapter(dev, mux);
	if (IS_ERR(parent_np))
		return dev_err_probe(dev, PTR_ERR(parent_np), "i2c-parent adapter not found\n");

	pr_info("%s base memory %08x\n", __func__, (u32)mux->base);

	children = of_get_child_count(node);

	muxc = i2c_mux_alloc(mux->parent, dev, children, 0, 0,
			     mux_data->i2c_mux_select, mux_data->i2c_mux_deselect);
	if (!muxc) {
		ret = -ENOMEM;
		goto err_parent;
	}
	muxc->priv = mux;

	platform_set_drvdata(pdev, muxc);

	for_each_child_of_node(node, child) {
		u32 chan;
		u32 pin;

		ret = of_property_read_u32(child, "reg", &chan);
		if (ret < 0) {
			dev_err(dev, "no reg property for node '%pOFn'\n",
				child);
			goto err_children;
		}

		if (chan >= NUM_MASTERS * NUM_BUSSES) {
			dev_err(dev, "invalid reg %u\n", chan);
			ret = -EINVAL;
			goto err_children;
		}

		if (of_property_read_u32(child, "scl-pin", &pin)) {
			dev_warn(dev, "SCL pin not found in DT, using default\n");
			pin = mux_data->scl0_pin;
		}
		if (!(pin == mux_data->scl0_pin || pin == mux_data->scl1_pin)) {
			dev_warn(dev, "SCL pin %d not supported\n", pin);
			ret = -EINVAL;
			goto err_children;
		}
		channels[chan].scl_num = pin == mux_data->scl0_pin ? 0 : 1;
		pr_info("%s channel %d scl_num %d\n", __func__, chan, channels[chan].scl_num);

		if (of_property_read_u32(child, "sda-pin", &pin)) {
			dev_warn(dev, "SDA pin not found in DT, using default \n");
			pin = mux_data->sda0_pin;
		}
		channels[chan].sda_num = pin - mux_data->sda0_pin;
		if (channels[chan].sda_num < 0 || channels[chan].sda_num >= mux_data->sda_pins) {
			dev_warn(dev, "SDA pin %d not supported\n", pin);
			return -EINVAL;
		}
		pr_info("%s channel %d sda_num %d\n", __func__, chan, channels[chan].sda_num);

		mux_data->sda_sel(muxc, channels[chan].sda_num);

		ret = i2c_mux_add_adapter(muxc, 0, chan, 0);
		if (ret)
			goto err_children;
	}

	dev_info(dev, "%d-port mux on %s adapter\n", children, mux->parent->name);

	return 0;

err_children:
	i2c_mux_del_adapters(muxc);
err_parent:
	i2c_put_adapter(mux->parent);

	return ret;
}
