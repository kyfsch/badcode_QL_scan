static int gpio_latch_probe(struct platform_device *pdev)
{
	struct gpio_latch_chip *glc;
	struct gpio_chip *gc;
	struct device *dev = &pdev->dev;
	struct device_node *of_node = dev->of_node;
	int i, n;

	glc = devm_kzalloc(dev, sizeof(*glc), GFP_KERNEL);
	if (!glc)
		return -ENOMEM;

	mutex_init(&glc->mutex);
	mutex_init(&glc->latch_mutex);

	n = gpiod_count(dev, NULL);
	if (n <= 0) {
		dev_err(dev, "failed to get gpios: %d\n", n);
		return n;
	} else if (n != GPIO_LATCH_LINES) {
		dev_err(dev, "expected %d gpios\n", GPIO_LATCH_LINES);
		return -EINVAL;
	}

	for (i = 0; i < n; i++) {
		glc->gpios[i] = devm_gpiod_get_index_optional(dev, NULL, i,
			GPIOD_OUT_LOW);
		if (IS_ERR(glc->gpios[i])) {
			if (PTR_ERR(glc->gpios[i]) != -EPROBE_DEFER) {
				dev_err(dev, "failed to get gpio %d: %ld\n", i,
					PTR_ERR(glc->gpios[i]));
			}
			return PTR_ERR(glc->gpios[i]);
		}
	}

	glc->le_gpio = 8;
	glc->le_active_low = gpiod_is_active_low(glc->gpios[glc->le_gpio]);

	if (!glc->gpios[glc->le_gpio]) {
		dev_err(dev, "missing required latch-enable gpio %d\n",
			glc->le_gpio);
		return -EINVAL;
	}

	gc = &glc->gc;
	gc->label = GPIO_LATCH_DRIVER_NAME;
	gc->can_sleep = true;
	gc->base = -1;
	gc->ngpio = GPIO_LATCH_LINES;
	gc->get = gpio_latch_get;
	gc->set = gpio_latch_set;
	gc->direction_output = gpio_latch_direction_output;
	gc->of_node = of_node;

	platform_set_drvdata(pdev, glc);

	i = gpiochip_add(&glc->gc);
	if (i) {
		dev_err(dev, "gpiochip_add() failed: %d\n", i);
		return i;
	}

	return 0;
}
