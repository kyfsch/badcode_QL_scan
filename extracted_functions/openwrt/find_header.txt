static int find_header(uint8_t *buf, uint32_t buf_size,
		       struct data_header **data_table)
{
	uint8_t *tmp_buf = buf + start_offset;
	uint8_t tmp_hdr[4] = { STAG_ID, STAG_ID, (STAG_MAGIC & 0xFF), (STAG_MAGIC >> 8) };
	struct csxf_header *tmp_csxf_header;
	uint16_t tmp_checksum = 0;
	uint16_t data_header_counter = 0;
	int ret = EXIT_FAILURE;

	VERBOSE("Looking for STAG header!");

	while ((uint32_t) tmp_buf - (uint32_t) buf <= buf_size) {
		if (!memcmp(tmp_buf, tmp_hdr, 4)) {
			if (((struct stag_header *)tmp_buf)->tag_checksum ==
			    (uint16_t) ~jboot_checksum(0, (uint16_t *) tmp_buf,
							STAG_SIZE - 2)) {
				VERBOSE("Found proper STAG header at: 0x%X.",
					tmp_buf - buf);
				break;
			}
		}
		tmp_buf++;
	}

	tmp_csxf_header = (struct csxf_header *)(tmp_buf + STAG_SIZE);
	if (tmp_csxf_header->magic != CSXF_MAGIC) {
		ERR("CSXF magic incorrect! 0x%X != 0x%X",
		    tmp_csxf_header->magic, CSXF_MAGIC);
		goto out;
	}
	VERBOSE("CSXF magic ok.");
	tmp_checksum = tmp_csxf_header->checksum;
	tmp_csxf_header->checksum = 0;

	tmp_csxf_header->checksum =
	    (uint16_t) ~jboot_checksum(0, (uint16_t *) (tmp_buf + STAG_SIZE),
					tmp_csxf_header->raw_length +
					CSXF_SIZE);

	if (tmp_checksum != tmp_csxf_header->checksum) {
		ERR("CSXF checksum incorrect! Stored: 0x%X Calculated: 0x%X",
		    tmp_checksum, tmp_csxf_header->checksum);
		goto out;
	}
	VERBOSE("CSXF image checksum ok.");

	tmp_buf = tmp_buf + STAG_SIZE + CSXF_SIZE;

	while ((uint32_t) tmp_buf - (uint32_t) buf <= buf_size) {

		struct data_header *tmp_data_header =
		    (struct data_header *)tmp_buf;

		if (tmp_data_header->unknown != DATA_HEADER_UNKNOWN) {
			tmp_buf++;
			continue;
		}
		if (tmp_data_header->type != DATA_HEADER_EEPROM
		    && tmp_data_header->type != DATA_HEADER_CONFIG) {
			tmp_buf++;
			continue;
		}

		data_table[data_header_counter] = tmp_data_header;
		tmp_buf +=
		    DATA_HEADER_SIZE + data_table[data_header_counter]->length;
		data_header_counter++;

	}

	ret = data_header_counter;

 out:
	return ret;
}
