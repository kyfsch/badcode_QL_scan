static int fe_change_mtu(struct net_device *dev, int new_mtu)
{
	struct fe_priv *priv = netdev_priv(dev);
	int frag_size, old_mtu;
	u32 fwd_cfg;

	old_mtu = dev->mtu;
	dev->mtu = new_mtu;

	if (!(priv->flags & FE_FLAG_JUMBO_FRAME))
		return 0;

	/* return early if the buffer sizes will not change */
	if (old_mtu <= ETH_DATA_LEN && new_mtu <= ETH_DATA_LEN)
		return 0;
	if (old_mtu > ETH_DATA_LEN && new_mtu > ETH_DATA_LEN)
		return 0;

	if (new_mtu <= ETH_DATA_LEN)
		priv->rx_ring.frag_size = fe_max_frag_size(ETH_DATA_LEN);
	else
		priv->rx_ring.frag_size = PAGE_SIZE;
	priv->rx_ring.rx_buf_size = fe_max_buf_size(priv->rx_ring.frag_size);

	if (!netif_running(dev))
		return 0;

	fe_stop(dev);
	if (!IS_ENABLED(CONFIG_SOC_MT7621)) {
		fwd_cfg = fe_r32(FE_GDMA1_FWD_CFG);
		if (new_mtu <= ETH_DATA_LEN) {
			fwd_cfg &= ~FE_GDM1_JMB_EN;
		} else {
			frag_size = fe_max_frag_size(new_mtu);
			fwd_cfg &= ~(FE_GDM1_JMB_LEN_MASK << FE_GDM1_JMB_LEN_SHIFT);
			fwd_cfg |= (DIV_ROUND_UP(frag_size, 1024) <<
			FE_GDM1_JMB_LEN_SHIFT) | FE_GDM1_JMB_EN;
		}
		fe_w32(fwd_cfg, FE_GDMA1_FWD_CFG);
	}

	return fe_open(dev);
}
