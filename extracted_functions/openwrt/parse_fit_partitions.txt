int parse_fit_partitions(struct parsed_partitions *state, u64 fit_start_sector, u64 sectors, int *slot, int add_remain)
{
	struct block_device *bdev = state->disk->part0;
	struct address_space *mapping = bdev->bd_inode->i_mapping;
	struct page *page;
	void *fit, *init_fit;
	struct partition_meta_info *info;
	char tmp[sizeof(info->volname)];
	u64 dsize, dsectors, imgmaxsect = 0;
	u32 size, image_pos, image_len;
	const u32 *image_offset_be, *image_len_be, *image_pos_be;
	int ret = 1, node, images, config;
	const char *image_name, *image_type, *image_description, *config_default,
		*config_description, *config_loadables, *bootconf_c;
	int image_name_len, image_type_len, image_description_len, config_default_len,
		config_description_len, config_loadables_len, bootconf_len;
	sector_t start_sect, nr_sects;
	size_t label_min;
	struct device_node *np = NULL;
	char *bootconf = NULL, *bootconf_term;
	const char *loadable;
	const char *select_rootfs = NULL;
	bool found;
	int loadables_rem_len, loadable_len;

	if (fit_start_sector % (1<<(PAGE_SHIFT - SECTOR_SHIFT)))
		return -ERANGE;

	page = read_mapping_page(mapping, fit_start_sector >> (PAGE_SHIFT - SECTOR_SHIFT), NULL);
	if (IS_ERR(page))
		return -EFAULT;

	if (PageError(page))
		return -EFAULT;

	init_fit = page_address(page);

	if (!init_fit) {
		put_page(page);
		return -EFAULT;
	}

	if (fdt_check_header(init_fit)) {
		put_page(page);
		return 0;
	}

	dsectors = get_capacity(bdev->bd_disk);
	if (sectors)
		dsectors = (dsectors>sectors)?sectors:dsectors;

	dsize = dsectors << SECTOR_SHIFT;
	size = fdt_totalsize(init_fit);

	/* silently skip non-external-data legacy FIT images */
	if (size > PAGE_SIZE) {
		put_page(page);
		return 0;
	}

	if (size >= dsize) {
		state->access_beyond_eod = 1;
		put_page(page);
		return -EFBIG;
	}

	fit = kmemdup(init_fit, size, GFP_KERNEL);
	put_page(page);
	if (!fit)
		return -ENOMEM;

	np = of_find_node_by_path("/chosen");
	if (np) {
		bootconf_c = of_get_property(np, "u-boot,bootconf", &bootconf_len);
		if (bootconf_c && bootconf_len)
			bootconf = kmemdup_nul(bootconf_c, bootconf_len, GFP_KERNEL);
	}

	if (bootconf) {
		bootconf_term = strchr(bootconf, '#');
		if (bootconf_term)
			*bootconf_term = '\0';
	}

	config = fdt_path_offset(fit, FIT_CONFS_PATH);
	if (config < 0) {
		printk(KERN_ERR "FIT: Cannot find %s node: %d\n", FIT_CONFS_PATH, images);
		ret = -ENOENT;
		goto ret_out;
	}

	config_default = fdt_getprop(fit, config, FIT_DEFAULT_PROP, &config_default_len);

	if (!config_default && !bootconf) {
		printk(KERN_ERR "FIT: Cannot find default configuration\n");
		ret = -ENOENT;
		goto ret_out;
	}

	node = fdt_subnode_offset(fit, config, bootconf?:config_default);
	if (node < 0) {
		printk(KERN_ERR "FIT: Cannot find %s node: %d\n", bootconf?:config_default, node);
		ret = -ENOENT;
		goto ret_out;
	}

	config_description = fdt_getprop(fit, node, FIT_DESC_PROP, &config_description_len);
	config_loadables = fdt_getprop(fit, node, FIT_LOADABLE_PROP, &config_loadables_len);

	printk(KERN_DEBUG "FIT: %s configuration: \"%s\"%s%s%s\n",
		bootconf?"Selected":"Default", bootconf?:config_default,
		config_description?" (":"", config_description?:"", config_description?")":"");

	if (!config_loadables || !config_loadables_len) {
		printk(KERN_ERR "FIT: No loadables configured in \"%s\"\n", bootconf?:config_default);
		ret = -ENOENT;
		goto ret_out;
	}

	images = fdt_path_offset(fit, FIT_IMAGES_PATH);
	if (images < 0) {
		printk(KERN_ERR "FIT: Cannot find %s node: %d\n", FIT_IMAGES_PATH, images);
		ret = -EINVAL;
		goto ret_out;
	}

	fdt_for_each_subnode(node, fit, images) {
		image_name = fdt_get_name(fit, node, &image_name_len);
		image_type = fdt_getprop(fit, node, FIT_TYPE_PROP, &image_type_len);
		image_offset_be = fdt_getprop(fit, node, FIT_DATA_OFFSET_PROP, NULL);
		image_pos_be = fdt_getprop(fit, node, FIT_DATA_POSITION_PROP, NULL);
		image_len_be = fdt_getprop(fit, node, FIT_DATA_SIZE_PROP, NULL);
		if (!image_name || !image_type || !image_len_be)
			continue;

		image_len = be32_to_cpu(*image_len_be);
		if (!image_len)
			continue;

		if (image_offset_be)
			image_pos = be32_to_cpu(*image_offset_be) + size;
		else if (image_pos_be)
			image_pos = be32_to_cpu(*image_pos_be);
		else
			continue;

		image_description = fdt_getprop(fit, node, FIT_DESC_PROP, &image_description_len);

		printk(KERN_DEBUG "FIT: %16s sub-image 0x%08x..0x%08x \"%s\" %s%s%s\n",
			image_type, image_pos, image_pos + image_len - 1, image_name,
			image_description?"(":"", image_description?:"", image_description?") ":"");

		if (strcmp(image_type, FIT_FILESYSTEM_PROP))
			continue;

		/* check if sub-image is part of configured loadables */
		found = false;
		loadable = config_loadables;
		loadables_rem_len = config_loadables_len;
		while (loadables_rem_len > 1) {
			loadable_len = strnlen(loadable, loadables_rem_len - 1) + 1;
			loadables_rem_len -= loadable_len;
			if (!strncmp(image_name, loadable, loadable_len)) {
				found = true;
				break;
			}
			loadable += loadable_len;
		}
		if (!found)
			continue;

		if (image_pos & ((1 << PAGE_SHIFT)-1)) {
			printk(KERN_ERR "FIT: image %s start not aligned to page boundaries, skipping\n", image_name);
			continue;
		}

		if (image_len & ((1 << PAGE_SHIFT)-1)) {
			printk(KERN_ERR "FIT: sub-image %s end not aligned to page boundaries, skipping\n", image_name);
			continue;
		}

		start_sect = image_pos >> SECTOR_SHIFT;
		nr_sects = image_len >> SECTOR_SHIFT;
		imgmaxsect = (imgmaxsect < (start_sect + nr_sects))?(start_sect + nr_sects):imgmaxsect;

		if (start_sect + nr_sects > dsectors) {
			state->access_beyond_eod = 1;
			continue;
		}

		put_partition(state, ++(*slot), fit_start_sector + start_sect, nr_sects);
		state->parts[*slot].flags = ADDPART_FLAG_READONLY;
		state->parts[*slot].has_info = true;
		info = &state->parts[*slot].info;

		label_min = min_t(int, sizeof(info->volname) - 1, image_name_len);
		strncpy(info->volname, image_name, label_min);
		info->volname[label_min] = '\0';

		snprintf(tmp, sizeof(tmp), "(%s)", info->volname);
		strlcat(state->pp_buf, tmp, PAGE_SIZE);

		/* Mark first loadable listed to be mounted as rootfs */
		if (!strcmp(image_name, config_loadables)) {
			select_rootfs = image_name;
			state->parts[*slot].flags |= ADDPART_FLAG_ROOTDEV;
		}
	}

	if (select_rootfs)
		printk(KERN_DEBUG "FIT: selecting configured loadable \"%s\" to be root filesystem\n", select_rootfs);

	if (add_remain && (imgmaxsect + MIN_FREE_SECT) < dsectors) {
		put_partition(state, ++(*slot), fit_start_sector + imgmaxsect, dsectors - imgmaxsect);
		state->parts[*slot].flags = 0;
		info = &state->parts[*slot].info;
		strcpy(info->volname, REMAIN_VOLNAME);
		snprintf(tmp, sizeof(tmp), "(%s)", REMAIN_VOLNAME);
		strlcat(state->pp_buf, tmp, PAGE_SIZE);
	}
ret_out:
	kfree(bootconf);
	kfree(fit);
	return ret;
}
