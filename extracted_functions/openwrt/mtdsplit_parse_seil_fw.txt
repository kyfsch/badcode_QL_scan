static int mtdsplit_parse_seil_fw(struct mtd_info *master,
				  const struct mtd_partition **pparts,
				  struct mtd_part_parser_data *data)
{
	struct device_node *np = mtd_get_of_node(master);
	struct mtd_partition *parts;
	struct seil_header header;
	size_t image_size = 0;
	size_t rootfs_offset;
	size_t hdrlen = sizeof(header);
	size_t retlen;
	int ret;
	u64 id;

	if (!seil_bootdev_is_active(np))
		return -ENODEV;

	ret = of_property_read_u64(np, "iij,seil-id", &id);
	if (ret) {
		pr_err("failed to get iij,seil-id from dt\n");
		return ret;
	}
	pr_debug("got seil-id=0x%016llx from dt\n", id);

	parts = kcalloc(NR_PARTS, sizeof(*parts), GFP_KERNEL);
	if (!parts)
		return -ENOMEM;

	ret = mtd_read(master, 0, hdrlen, &retlen, (void *)&header);
	if (ret)
		goto err_free_parts;

	if (retlen != hdrlen) {
		ret = -EIO;
		goto err_free_parts;
	}

	if (be64_to_cpu(header.id) != id ||
	    be32_to_cpu(header.vfmt) != SEIL_VFMT) {
		pr_debug("no valid seil image found in \"%s\"\n", master->name);
		ret = -ENODEV;
		goto err_free_parts;
	}

	image_size = hdrlen + be32_to_cpu(header.dlen);
	if (image_size > master->size) {
		pr_err("seil image exceeds MTD device \"%s\"\n", master->name);
		ret = -EINVAL;
		goto err_free_parts;
	}

	/* find the roots after the seil image */
	ret = mtd_find_rootfs_from(master, image_size,
				   master->size, &rootfs_offset, NULL);
	if (ret || (master->size - rootfs_offset) == 0) {
		pr_debug("no rootfs after seil image in \"%s\"\n",
			 master->name);
		ret = -ENODEV;
		goto err_free_parts;
	}

	parts[0].name = KERNEL_PART_NAME;
	parts[0].offset = 0;
	parts[0].size = rootfs_offset;

	parts[1].name = ROOTFS_PART_NAME;
	parts[1].offset = rootfs_offset;
	parts[1].size = master->size - rootfs_offset;

	*pparts = parts;
	return NR_PARTS;

err_free_parts:
	kfree(parts);
	return ret;
}
