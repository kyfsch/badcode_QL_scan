ead_decrypt_message(struct ead_msg *msg)
{
	struct ead_msg_encrypted *enc = EAD_DATA(msg, enc);
	unsigned char *data = (unsigned char *) enc;
	uint32_t hash_old[5], hash_new[5];
	int len = ntohl(msg->len);
	int i, enclen = len;

	if (!len || (len % EAD_ENC_PAD > 0))
		return 0;

	while (len > 0) {
		rijndaelDecrypt(aes_dec_ctx, data, data);
		data += 16;
		len -= 16;
	}

	data = (unsigned char *) enc;

	if (enc->pad >= EAD_ENC_PAD) {
		DEBUG(2, "Invalid padding length\n");
		return 0;
	}

	if (!ead_check_rx_iv(ntohl(enc->iv))) {
		DEBUG(2, "RX IV mismatch (0x%08x <> 0x%08x)\n", ead_rx_iv, ntohl(enc->iv));
		return 0;
	}

	for (i = 0; i < 5; i++)
		hash_old[i] = ntohl(enc->hash[i]);
	ead_hash_message(enc, hash_new, enclen);
	if (memcmp(hash_old, hash_new, sizeof(hash_old)) != 0) {
		DEBUG(2, "SHA1 mismatch (0x%08x != 0x%08x), len=%d\n", hash_old[0], hash_new[0], enclen);
		return 0;
	}

	enclen -= enc->pad + sizeof(struct ead_msg_encrypted);
	return enclen;
}
