swconfig_send_switch(struct sk_buff *msg, u32 pid, u32 seq, int flags,
		const struct switch_dev *dev)
{
	struct nlattr *p = NULL, *m = NULL;
	void *hdr;
	int i;

	hdr = genlmsg_put(msg, pid, seq, &switch_fam, flags,
			SWITCH_CMD_NEW_ATTR);
	if (IS_ERR(hdr))
		return -1;

	if (nla_put_u32(msg, SWITCH_ATTR_ID, dev->id))
		goto nla_put_failure;
	if (nla_put_string(msg, SWITCH_ATTR_DEV_NAME, dev->devname))
		goto nla_put_failure;
	if (nla_put_string(msg, SWITCH_ATTR_ALIAS, dev->alias))
		goto nla_put_failure;
	if (nla_put_string(msg, SWITCH_ATTR_NAME, dev->name))
		goto nla_put_failure;
	if (nla_put_u32(msg, SWITCH_ATTR_VLANS, dev->vlans))
		goto nla_put_failure;
	if (nla_put_u32(msg, SWITCH_ATTR_PORTS, dev->ports))
		goto nla_put_failure;
	if (nla_put_u32(msg, SWITCH_ATTR_CPU_PORT, dev->cpu_port))
		goto nla_put_failure;

	m = nla_nest_start(msg, SWITCH_ATTR_PORTMAP);
	if (!m)
		goto nla_put_failure;
	for (i = 0; i < dev->ports; i++) {
		p = nla_nest_start(msg, SWITCH_ATTR_PORTS);
		if (!p)
			continue;
		if (dev->portmap[i].s) {
			if (nla_put_string(msg, SWITCH_PORTMAP_SEGMENT,
						dev->portmap[i].s))
				goto nla_put_failure;
			if (nla_put_u32(msg, SWITCH_PORTMAP_VIRT,
						dev->portmap[i].virt))
				goto nla_put_failure;
		}
		nla_nest_end(msg, p);
	}
	nla_nest_end(msg, m);
	genlmsg_end(msg, hdr);
	return msg->len;
nla_put_failure:
	genlmsg_cancel(msg, hdr);
	return -EMSGSIZE;
}
