static uint32_t do_load(void)
{
	image_header_t header;
	uint32_t ih_size, ih_load, ih_ep;

	if (spi_nor_read_id())
		return UINT32_MAX;

	puts("Reading image header...\n");
	if (spi_nor_read_data(&header, CONFIG_IMAGE_OFFSET, sizeof(header)))
		return UINT32_MAX;

	if (!check_image_header(&header))
		return UINT32_MAX;

	header.ih_name[sizeof(header.ih_name) - 1] = 0;
	ih_size = be32_to_cpu(header.ih_size);
	ih_load = be32_to_cpu(header.ih_load);
	ih_ep = be32_to_cpu(header.ih_ep);

	put_with_label("Image Name:   ", puts, (const char *)header.ih_name);
	put_with_label("Data Size:    ", put_u32, ih_size);
	put_with_label("Load Address: ", put_u32, ih_load);
	put_with_label("Entry Point:  ", put_u32, ih_ep);

	puts("Reading image data...\n");
	void *loadaddr = (void *)ih_load;
	if (spi_nor_read_data(loadaddr, CONFIG_IMAGE_OFFSET + sizeof(header),
			      ih_size))
		return false;

	flush_cache(loadaddr, ih_size);

	return ih_ep;
}
