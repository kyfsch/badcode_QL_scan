add_switch(struct nl_msg *msg, void *arg)
{
	struct swlib_scan_arg *sa = arg;
	struct genlmsghdr *gnlh = nlmsg_data(nlmsg_hdr(msg));
	struct switch_dev *dev;
	const char *name;
	const char *alias;

	if (nla_parse(tb, SWITCH_ATTR_MAX, genlmsg_attrdata(gnlh, 0), genlmsg_attrlen(gnlh, 0), NULL) < 0)
		goto done;

	if (!tb[SWITCH_ATTR_DEV_NAME])
		goto done;

	name = nla_get_string(tb[SWITCH_ATTR_DEV_NAME]);
	alias = nla_get_string(tb[SWITCH_ATTR_ALIAS]);

	if (sa->name && (strcmp(name, sa->name) != 0) && (strcmp(alias, sa->name) != 0))
		goto done;

	dev = swlib_alloc(sizeof(struct switch_dev));
	if (!dev)
		goto done;

	strncpy(dev->dev_name, name, IFNAMSIZ - 1);
	dev->alias = strdup(alias);
	if (tb[SWITCH_ATTR_ID])
		dev->id = nla_get_u32(tb[SWITCH_ATTR_ID]);
	if (tb[SWITCH_ATTR_NAME])
		dev->name = strdup(nla_get_string(tb[SWITCH_ATTR_NAME]));
	if (tb[SWITCH_ATTR_PORTS])
		dev->ports = nla_get_u32(tb[SWITCH_ATTR_PORTS]);
	if (tb[SWITCH_ATTR_VLANS])
		dev->vlans = nla_get_u32(tb[SWITCH_ATTR_VLANS]);
	if (tb[SWITCH_ATTR_CPU_PORT])
		dev->cpu_port = nla_get_u32(tb[SWITCH_ATTR_CPU_PORT]);
	if (tb[SWITCH_ATTR_PORTMAP])
		add_port_map(dev, tb[SWITCH_ATTR_PORTMAP]);

	if (!sa->head) {
		sa->head = dev;
		sa->ptr = dev;
	} else {
		sa->ptr->next = dev;
		sa->ptr = dev;
	}

	refcount++;
done:
	return NL_SKIP;
}
