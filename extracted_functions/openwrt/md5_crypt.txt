md5_crypt(char passwd[MD5_OUT_BUFSIZE], const unsigned char *pw, const unsigned char *salt)
{
	const unsigned char *sp, *ep;
	char *p;
	unsigned char final[17];	/* final[16] exists only to aid in looping */
	int sl, pl, i, pw_len;
	struct MD5Context ctx, ctx1;

	/* Refine the Salt first */
	sp = salt;

	sp += MD5_MAGIC_LEN;

	/* It stops at the first '$', max 8 chars */
	for (ep = sp; *ep && *ep != '$' && ep < (sp+8); ep++)
		continue;

	/* get the length of the true salt */
	sl = ep - sp;

	__md5_Init(&ctx);

	/* The password first, since that is what is most unknown */
	pw_len = strlen((char*)pw);
	__md5_Update(&ctx, pw, pw_len);

	/* Then our magic string */
	__md5_Update(&ctx, __md5__magic, MD5_MAGIC_LEN);

	/* Then the raw salt */
	__md5_Update(&ctx, sp, sl);

	/* Then just as many characters of the MD5(pw, salt, pw) */
	__md5_Init(&ctx1);
	__md5_Update(&ctx1, pw, pw_len);
	__md5_Update(&ctx1, sp, sl);
	__md5_Update(&ctx1, pw, pw_len);
	__md5_Final(final, &ctx1);
	for (pl = pw_len; pl > 0; pl -= 16)
		__md5_Update(&ctx, final, pl > 16 ? 16 : pl);

	/* Don't leave anything around in vm they could use. */
//TODO: the above comment seems to be wrong. final is used later.
	memset(final, 0, sizeof(final));

	/* Then something really weird... */
	for (i = pw_len; i; i >>= 1) {
		__md5_Update(&ctx, ((i & 1) ? final : (const unsigned char *) pw), 1);
	}

	/* Now make the output string */
	passwd[0] = '$';
	passwd[1] = '1';
	passwd[2] = '$';
	strncpy(passwd + 3, (char*)sp, sl);
	passwd[sl + 3] = '$';

	__md5_Final(final, &ctx);

	/*
	 * and now, just to make sure things don't run too fast
	 * On a 60 Mhz Pentium this takes 34 msec, so you would
	 * need 30 seconds to build a 1000 entry dictionary...
	 */
	for (i = 0; i < 1000; i++) {
		__md5_Init(&ctx1);
		if (i & 1)
			__md5_Update(&ctx1, pw, pw_len);
		else
			__md5_Update(&ctx1, final, 16);

		if (i % 3)
			__md5_Update(&ctx1, sp, sl);

		if (i % 7)
			__md5_Update(&ctx1, pw, pw_len);

		if (i & 1)
			__md5_Update(&ctx1, final, 16);
		else
			__md5_Update(&ctx1, pw, pw_len);
		__md5_Final(final, &ctx1);
	}

	p = passwd + sl + 4; /* 12 bytes max (sl is up to 8 bytes) */

	/* Add 5*4+2 = 22 bytes of hash, + NUL byte. */
	final[16] = final[5];
	for (i = 0; i < 5; i++) {
		unsigned l = (final[i] << 16) | (final[i+6] << 8) | final[i+12];
		p = __md5_to64(p, l, 4);
	}
	p = __md5_to64(p, final[11], 2);
	*p = '\0';

	/* Don't leave anything around in vm they could use. */
	memset(final, 0, sizeof(final));

	return passwd;
}
