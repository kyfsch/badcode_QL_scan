static int ws2812b_probe(struct spi_device *spi)
{
	struct device *dev = &spi->dev;
	int cur_led = 0;
	struct ws2812b_priv *priv;
	struct fwnode_handle *led_node;
	int num_leds, i, cnt, ret;

	num_leds = device_get_child_node_count(dev);

	priv = devm_kzalloc(dev, struct_size(priv, leds, num_leds), GFP_KERNEL);
	if (!priv)
		return -ENOMEM;
	priv->data_len =
		num_leds * WS2812B_BYTES_PER_COLOR * WS2812B_NUM_COLORS +
		WS2812B_RESET_LEN;
	priv->data_buf = kzalloc(priv->data_len, GFP_KERNEL);
	if (!priv->data_buf)
		return -ENOMEM;

	for (i = 0; i < num_leds * WS2812B_NUM_COLORS; i++)
		ws2812b_set_byte(priv, i, 0);

	mutex_init(&priv->mutex);
	priv->num_leds = num_leds;
	priv->spi = spi;

	device_for_each_child_node(dev, led_node) {
		struct led_init_data init_data = {
			.fwnode = led_node,
		};
		/* WS2812B LEDs usually come with GRB color */
		u32 color_idx[WS2812B_NUM_COLORS] = {
			LED_COLOR_ID_GREEN,
			LED_COLOR_ID_RED,
			LED_COLOR_ID_BLUE,
		};
		u32 cascade;

		ret = fwnode_property_read_u32(led_node, "reg", &cascade);
		if (ret) {
			dev_err(dev, "failed to obtain numerical LED index for %s",
				fwnode_get_name(led_node));
			goto ERR_UNREG_LEDS;
		}
		if (cascade >= num_leds) {
			dev_err(dev, "LED index of %s is larger than the number of LEDs.",
				fwnode_get_name(led_node));
			ret = -EINVAL;
			goto ERR_UNREG_LEDS;
		}

		cnt = fwnode_property_count_u32(led_node, "color-index");
		if (cnt > 0 && cnt <= WS2812B_NUM_COLORS)
			fwnode_property_read_u32_array(led_node, "color-index",
						       color_idx, (size_t)cnt);

		priv->leds[cur_led].mc_cdev.subled_info =
			priv->leds[cur_led].subled;
		priv->leds[cur_led].mc_cdev.num_colors = WS2812B_NUM_COLORS;
		priv->leds[cur_led].mc_cdev.led_cdev.max_brightness = 255;
		priv->leds[cur_led].mc_cdev.led_cdev.brightness_set_blocking = ws2812b_set;

		for (i = 0; i < WS2812B_NUM_COLORS; i++) {
			priv->leds[cur_led].subled[i].color_index = color_idx[i];
			priv->leds[cur_led].subled[i].intensity = 255;
		}

		priv->leds[cur_led].cascade = cascade;

		ret = led_classdev_multicolor_register_ext(
			dev, &priv->leds[cur_led].mc_cdev, &init_data);
		if (ret) {
			dev_err(dev, "registration of %s failed.",
				fwnode_get_name(led_node));
			goto ERR_UNREG_LEDS;
		}
		cur_led++;
	}

	spi_set_drvdata(spi, priv);

	return 0;
ERR_UNREG_LEDS:
	for (; cur_led >= 0; cur_led--)
		led_classdev_multicolor_unregister(&priv->leds[cur_led].mc_cdev);
	mutex_destroy(&priv->mutex);
	kfree(priv->data_buf);
	return ret;
}
