static int bcm63xx_parse_partitions(struct mtd_info *master,
				    const struct mtd_partition **pparts,
				    struct bcm_tag *hdr)
{
	struct mtd_partition *parts;
	unsigned int flash_image_start;
	unsigned int kernel_address;
	unsigned int kernel_length;
	size_t kernel_offset = 0, kernel_size = 0;
	size_t rootfs_offset = 0, rootfs_size = 0;
	int kernel_part, rootfs_part;

	STR_NULL_TERMINATE(hdr->flash_image_start);
	if (kstrtouint(hdr->flash_image_start, 10, &flash_image_start) ||
	    flash_image_start < BCM963XX_EXTENDED_SIZE) {
		pr_err("invalid rootfs address: %*ph\n",
		       (int) sizeof(hdr->flash_image_start),
		       hdr->flash_image_start);
		return -EINVAL;
	}

	STR_NULL_TERMINATE(hdr->kernel_address);
	if (kstrtouint(hdr->kernel_address, 10, &kernel_address) ||
	    kernel_address < BCM963XX_EXTENDED_SIZE) {
		pr_err("invalid kernel address: %*ph\n",
		       (int) sizeof(hdr->kernel_address), hdr->kernel_address);
		return -EINVAL;
	}

	STR_NULL_TERMINATE(hdr->kernel_length);
	if (kstrtouint(hdr->kernel_length, 10, &kernel_length) ||
	    !kernel_length) {
		pr_err("invalid kernel length: %*ph\n",
		       (int) sizeof(hdr->kernel_length), hdr->kernel_length);
		return -EINVAL;
	}

	kernel_offset = kernel_address - BCM963XX_EXTENDED_SIZE -
			mtdpart_get_offset(master);
	kernel_size = kernel_length;

	if (flash_image_start < kernel_address) {
		/* rootfs first */
		rootfs_part = 0;
		kernel_part = 1;
		rootfs_offset = flash_image_start - BCM963XX_EXTENDED_SIZE -
				mtdpart_get_offset(master);
		rootfs_size = kernel_offset - rootfs_offset;
	} else {
		/* kernel first */
		kernel_part = 0;
		rootfs_part = 1;
		rootfs_offset = kernel_offset + kernel_size;
		rootfs_size = master->size - rootfs_offset;
	}

	if (mtd_check_rootfs_magic(master, rootfs_offset, NULL))
		pr_warn("rootfs magic not found\n");

	parts = kzalloc(BCM63XX_NR_PARTS * sizeof(*parts), GFP_KERNEL);
	if (!parts)
		return -ENOMEM;

	parts[kernel_part].name = KERNEL_PART_NAME;
	parts[kernel_part].offset = kernel_offset;
	parts[kernel_part].size = kernel_size;

	parts[rootfs_part].name = ROOTFS_PART_NAME;
	parts[rootfs_part].offset = rootfs_offset;
	parts[rootfs_part].size = rootfs_size;

	*pparts = parts;
	return BCM63XX_NR_PARTS;
}
