uc_bpf_map_set(uc_vm_t *vm, size_t nargs)
{
	struct uc_bpf_map *map = uc_fn_thisval("bpf.map");
	uc_value_t *a_key = uc_fn_arg(0);
	uc_value_t *a_val = uc_fn_arg(1);
	uc_value_t *a_flags = uc_fn_arg(2);
	uint64_t flags;
	void *key, *val;

	if (!map)
		err_return(EINVAL, NULL);

	key = uc_bpf_map_arg(a_key, "key", map->key_size);
	if (!key)
		return NULL;

	val = uc_bpf_map_arg(a_val, "value", map->val_size);
	if (!val)
		return NULL;

	if (!a_flags)
		flags = BPF_ANY;
	else if (ucv_type(a_flags) != UC_INTEGER)
		err_return(EINVAL, "flags");
	else
		flags = ucv_int64_get(a_flags);

	if (bpf_map_update_elem(map->fd.fd, key, val, flags))
		return NULL;

	return ucv_string_new_length(val, map->val_size);
}
