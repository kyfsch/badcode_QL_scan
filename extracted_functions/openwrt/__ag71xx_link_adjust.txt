__ag71xx_link_adjust(struct ag71xx *ag, bool update)
{
	struct device_node *np = ag->pdev->dev.of_node;
	u32 cfg2;
	u32 ifctl;
	u32 fifo5;

	if (!ag->link && update) {
		ag71xx_hw_stop(ag);
		netif_carrier_off(ag->dev);
		if (netif_msg_link(ag))
			pr_info("%s: link down\n", ag->dev->name);
		return;
	}

	if (!of_device_is_compatible(np, "qca,ar9130-eth") &&
	    !of_device_is_compatible(np, "qca,ar7100-eth"))
		ag71xx_fast_reset(ag);

	cfg2 = ag71xx_rr(ag, AG71XX_REG_MAC_CFG2);
	cfg2 &= ~(MAC_CFG2_IF_1000 | MAC_CFG2_IF_10_100 | MAC_CFG2_FDX);
	cfg2 |= (ag->duplex) ? MAC_CFG2_FDX : 0;

	ifctl = ag71xx_rr(ag, AG71XX_REG_MAC_IFCTL);
	ifctl &= ~(MAC_IFCTL_SPEED);

	fifo5 = ag71xx_rr(ag, AG71XX_REG_FIFO_CFG5);
	fifo5 &= ~FIFO_CFG5_BM;

	switch (ag->speed) {
	case SPEED_1000:
		cfg2 |= MAC_CFG2_IF_1000;
		fifo5 |= FIFO_CFG5_BM;
		break;
	case SPEED_100:
		cfg2 |= MAC_CFG2_IF_10_100;
		ifctl |= MAC_IFCTL_SPEED;
		break;
	case SPEED_10:
		cfg2 |= MAC_CFG2_IF_10_100;
		break;
	default:
		BUG();
		return;
	}

	if (ag->tx_ring.desc_split) {
		ag->fifodata[2] &= 0xffff;
		ag->fifodata[2] |= ((2048 - ag->tx_ring.desc_split) / 4) << 16;
	}

	ag71xx_wr(ag, AG71XX_REG_FIFO_CFG3, ag->fifodata[2]);

	if (update) {
		if (of_device_is_compatible(np, "qca,ar7100-eth") ||
		    of_device_is_compatible(np, "qca,ar9130-eth")) {
			ath79_set_pll(ag);
			ath79_mii_ctrl_set_speed(ag);
		} else if (of_device_is_compatible(np, "qca,ar7242-eth") ||
			   of_device_is_compatible(np, "qca,ar9340-eth") ||
			   of_device_is_compatible(np, "qca,qca9550-eth") ||
			   of_device_is_compatible(np, "qca,qca9560-eth")) {
			ath79_set_pllval(ag);
			if (of_property_read_bool(np, "qca955x-sgmii-fixup"))
				ag71xx_sgmii_init_qca955x(np);
		}
	}

	ag71xx_wr(ag, AG71XX_REG_MAC_CFG2, cfg2);
	ag71xx_wr(ag, AG71XX_REG_FIFO_CFG5, fifo5);
	ag71xx_wr(ag, AG71XX_REG_MAC_IFCTL, ifctl);

	if (of_device_is_compatible(np, "qca,qca9530-eth") ||
	    of_device_is_compatible(np, "qca,qca9560-eth")) {
		/*
		 * The rx ring buffer can stall on small packets on QCA953x and
		 * QCA956x. Disabling the inline checksum engine fixes the stall.
		 * The wr, rr functions cannot be used since this hidden register
		 * is outside of the normal ag71xx register block.
		 */
		void __iomem *dam = ioremap(0xb90001bc, 0x4);
		if (dam) {
			__raw_writel(__raw_readl(dam) & ~BIT(27), dam);
			(void)__raw_readl(dam);
			iounmap(dam);
		}
	}

	ag71xx_hw_start(ag);

	netif_carrier_on(ag->dev);
	if (update && netif_msg_link(ag))
		pr_info("%s: link up (%sMbps/%s duplex)\n",
			ag->dev->name,
			ag71xx_speed_str(ag),
			(DUPLEX_FULL == ag->duplex) ? "Full" : "Half");

	ag71xx_dump_regs(ag);
}
