hostapd_rrm_lm_req(struct ubus_context *ctx, struct ubus_object *obj,
		   struct ubus_request_data *ureq, const char *method,
		   struct blob_attr *msg)
{
	struct hostapd_data *hapd = container_of(obj, struct hostapd_data, ubus.obj);
	struct blob_attr *tb[__LM_REQ_MAX];
	struct wpabuf *buf;
	u8 addr[ETH_ALEN];
	int ret;
	int8_t txp_used, txp_max;

	txp_used = 0;
	txp_max = 0;

	blobmsg_parse(lm_req_policy, __LM_REQ_MAX, tb, blob_data(msg), blob_len(msg));

	if (!tb[LM_REQ_ADDR])
		return UBUS_STATUS_INVALID_ARGUMENT;

	if (tb[LM_REQ_TX_POWER_USED])
		txp_used = (int8_t) blobmsg_get_u32(tb[LM_REQ_TX_POWER_USED]);

	if (tb[LM_REQ_TX_POWER_MAX])
		txp_max = (int8_t) blobmsg_get_u32(tb[LM_REQ_TX_POWER_MAX]);

	if (hwaddr_aton(blobmsg_data(tb[LM_REQ_ADDR]), addr))
		return UBUS_STATUS_INVALID_ARGUMENT;

	buf = wpabuf_alloc(5);
	if (!buf)
		return UBUS_STATUS_UNKNOWN_ERROR;

	wpabuf_put_u8(buf, WLAN_ACTION_RADIO_MEASUREMENT);
	wpabuf_put_u8(buf, WLAN_RRM_LINK_MEASUREMENT_REQUEST);
	wpabuf_put_u8(buf, 1);
	/* TX-Power used */
	wpabuf_put_u8(buf, txp_used);
	/* Max TX Power */
	wpabuf_put_u8(buf, txp_max);

	ret = hostapd_drv_send_action(hapd, hapd->iface->freq, 0, addr,
				      wpabuf_head(buf), wpabuf_len(buf));

	wpabuf_free(buf);
	if (ret < 0)
		return -ret;

	return 0;
}
