void ifx_deu_aes_xts (void *ctx_arg, u8 *out_arg, const u8 *in_arg,
        u8 *iv_arg, size_t nbytes, int encdec)
{
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
    volatile struct aes_t *aes = (volatile struct aes_t *) AES_START;
    //struct aes_ctx *ctx = (struct aes_ctx *)ctx_arg;
    unsigned long flag;
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
    u8 oldiv[16];
    int i = 0;
    int byte_cnt = nbytes; 

    CRTCL_SECT_START;

    aes_set_key_hw (ctx_arg);

    aes->controlr.E_D = !encdec;    //encryption
    aes->controlr.O = 1; //0 ECB 1 CBC 2 OFB 3 CFB 4 CTR - CBC mode for xts

    i = 0;
    while (byte_cnt >= 16) {

        if (!encdec) {
            if (((byte_cnt % 16) > 0) && (byte_cnt < (2*XTS_BLOCK_SIZE))) {
                 memcpy(oldiv, iv_arg, 16);
                 gf128mul_x_ble((le128 *)iv_arg, (le128 *)iv_arg);
            }
            u128_xor((u128 *)((u32 *) in_arg + (i * 4) + 0), (u128 *)((u32 *) in_arg + (i * 4) + 0), (u128 *)iv_arg);
        }

        aes->IV3R = DEU_ENDIAN_SWAP(*(u32 *) iv_arg);
        aes->IV2R = DEU_ENDIAN_SWAP(*((u32 *) iv_arg + 1));
        aes->IV1R = DEU_ENDIAN_SWAP(*((u32 *) iv_arg + 2));
        aes->IV0R = DEU_ENDIAN_SWAP(*((u32 *) iv_arg + 3));

        aes->ID3R = INPUT_ENDIAN_SWAP(*((u32 *) in_arg + (i * 4) + 0));
        aes->ID2R = INPUT_ENDIAN_SWAP(*((u32 *) in_arg + (i * 4) + 1));
        aes->ID1R = INPUT_ENDIAN_SWAP(*((u32 *) in_arg + (i * 4) + 2));
        aes->ID0R = INPUT_ENDIAN_SWAP(*((u32 *) in_arg + (i * 4) + 3));    /* start crypto */

        while (aes->controlr.BUS) {
            // this will not take long
        }

        *((volatile u32 *) out_arg + (i * 4) + 0) = aes->OD3R;
        *((volatile u32 *) out_arg + (i * 4) + 1) = aes->OD2R;
        *((volatile u32 *) out_arg + (i * 4) + 2) = aes->OD1R;
        *((volatile u32 *) out_arg + (i * 4) + 3) = aes->OD0R;

        if (encdec) {
            u128_xor((u128 *)((volatile u32 *) out_arg + (i * 4) + 0), (u128 *)((volatile u32 *) out_arg + (i * 4) + 0), (u128 *)iv_arg);
        }
        gf128mul_x_ble((le128 *)iv_arg, (le128 *)iv_arg);
        i++;
        byte_cnt -= 16;
    }

    if (byte_cnt) {
	u8 state[XTS_BLOCK_SIZE] = {0,};

        if (!encdec) memcpy(iv_arg, oldiv, 16);

        aes->IV3R = DEU_ENDIAN_SWAP(*(u32 *) iv_arg);
        aes->IV2R = DEU_ENDIAN_SWAP(*((u32 *) iv_arg + 1));
        aes->IV1R = DEU_ENDIAN_SWAP(*((u32 *) iv_arg + 2));
        aes->IV0R = DEU_ENDIAN_SWAP(*((u32 *) iv_arg + 3));

        memcpy(state, ((u32 *) in_arg + (i * 4) + 0), byte_cnt);
        memcpy((state + byte_cnt), (out_arg + ((i - 1) * 16) + byte_cnt), (XTS_BLOCK_SIZE - byte_cnt));
        if (!encdec) {
            u128_xor((u128 *)state, (u128 *)state, (u128 *)iv_arg);
        }

        aes->ID3R = INPUT_ENDIAN_SWAP(*((u32 *) state + 0));
        aes->ID2R = INPUT_ENDIAN_SWAP(*((u32 *) state + 1));
        aes->ID1R = INPUT_ENDIAN_SWAP(*((u32 *) state + 2));
        aes->ID0R = INPUT_ENDIAN_SWAP(*((u32 *) state + 3));    /* start crypto */

        memcpy(((u32 *) out_arg + (i * 4) + 0), ((u32 *) out_arg + ((i - 1) * 4) + 0), byte_cnt);

        while (aes->controlr.BUS) {
            // this will not take long
        }

        *((volatile u32 *) out_arg + ((i-1) * 4) + 0) = aes->OD3R;
        *((volatile u32 *) out_arg + ((i-1) * 4) + 1) = aes->OD2R;
        *((volatile u32 *) out_arg + ((i-1) * 4) + 2) = aes->OD1R;
        *((volatile u32 *) out_arg + ((i-1) * 4) + 3) = aes->OD0R;

        if (encdec) {
            u128_xor((u128 *)((volatile u32 *) out_arg + ((i-1) * 4) + 0), (u128 *)((volatile u32 *) out_arg + ((i-1) * 4) + 0), (u128 *)iv_arg);
        }
    }

    CRTCL_SECT_END;
}
