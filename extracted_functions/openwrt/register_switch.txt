register_switch(struct switch_dev *dev, struct net_device *netdev)
{
	struct switch_dev *sdev;
	const int max_switches = 8 * sizeof(unsigned long);
	unsigned long in_use = 0;
	int err;
	int i;

	INIT_LIST_HEAD(&dev->dev_list);
	if (netdev) {
		dev->netdev = netdev;
		if (!dev->alias)
			dev->alias = netdev->name;
	}
	BUG_ON(!dev->alias);

	/* Make sure swdev_id doesn't overflow */
	if (swdev_id == INT_MAX) {
		return -ENOMEM;
	}

	if (dev->ports > 0) {
		dev->portbuf = kzalloc(sizeof(struct switch_port) *
				dev->ports, GFP_KERNEL);
		if (!dev->portbuf)
			return -ENOMEM;
		dev->portmap = kzalloc(sizeof(struct switch_portmap) *
				dev->ports, GFP_KERNEL);
		if (!dev->portmap) {
			kfree(dev->portbuf);
			return -ENOMEM;
		}
	}
	swconfig_defaults_init(dev);
	mutex_init(&dev->sw_mutex);
	swconfig_lock();
	dev->id = ++swdev_id;

	list_for_each_entry(sdev, &swdevs, dev_list) {
		if (!sscanf(sdev->devname, SWCONFIG_DEVNAME, &i))
			continue;
		if (i < 0 || i > max_switches)
			continue;

		set_bit(i, &in_use);
	}
	i = find_first_zero_bit(&in_use, max_switches);

	if (i == max_switches) {
		swconfig_unlock();
		return -ENFILE;
	}

#ifdef CONFIG_OF
	if (dev->ports)
		of_switch_load_portmap(dev);
#endif

	/* fill device name */
	snprintf(dev->devname, IFNAMSIZ, SWCONFIG_DEVNAME, i);

	list_add_tail(&dev->dev_list, &swdevs);
	swconfig_unlock();

	err = swconfig_create_led_trigger(dev);
	if (err)
		return err;

	return 0;
}
